from config import *
from functions import *
from jobs import *

from threading import Thread
import random
import schedule
import telebot
from telebot import types
import time
import math
from datetime import datetime
from flask import Flask, request, send_file, jsonify, render_template
from PIL import Image,ImageDraw,ImageFont
import emoji
import textwrap
from petpetgif.saveGif import save_transparent_gif
from pkg_resources import resource_stream
from sqlalchemy import create_engine
import json
from io import BytesIO
import html
import traceback
import requests

def callback_get(call,bot):
	blocked_messages = bot.antiflood['blocked_messages']
	blocked_users = bot.antiflood['blocked_users']

	strkey = f'{call.message.chat.id} {call.message.message_id}'
	if strkey in blocked_messages or call.from_user.id in blocked_users:
		answer_callback_query(bot,call,'–ü–æ–¥–æ–∂–¥–∏ –∑–∞–µ–±–∞–ª')
		return
	blocked_messages.append(strkey)
	blocked_users.append(call.from_user.id)
	try:
		callback_process(call,bot)
	finally:
		blocked_messages.remove(strkey)
		blocked_users.remove(call.from_user.id)
		
def callback_process(call,bot):
	cursor = bot.cursor
	db = bot.db
	today_text = bot.zavod['today_text']
	patch_version = bot.gazeta['patch_version']
	patch_image = bot.gazeta['patch_image']

	cmd_for_many = ['decline','accept','pvp','pjoin','bjoin','buy','poker','hand','boss']
	cmd_for_db = [
	'pplus','pminus','pcontinue','poker','pjoin','pstart','hand',
	'paper',
	'move','pve','interact','back',
	'bend','bjoin','bstart','bcontinue','buy','boss',
	'decline','accept','aremove','pvp'
	]
	args = call.data.split()
	cmd = args[0]
	if cmd == "no" or cmd == "nothing":
		answer_callback_query(bot,call,'–•—É–π–Ω—é –Ω–∞–∂–∞–ª')
		return
	idk = int(args[1])
	key = idk
	if call.from_user.id != idk and cmd not in cmd_for_many:
		answer_callback_query(bot,call,'–ü–∞—à–æ–ª –Ω–∞—Ö—É–π')
		return
	if key not in db.keys() and cmd in cmd_for_db:
		answer_callback_query(bot,call,'–ß–µ—Ç —Ö—É–π–Ω—è –∫–∞–∫–∞—è-—Ç–æ')
		txt = '–í —Å–≤—è–∑–∏ —Ö—É–π –∑–Ω–∞–µ—Ç —Å —á–µ–º –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ —É—Ç–µ—Ä—è–Ω—ã –∏ —ç—Ç–∞ —à—Ç—É–∫–∞ –±–æ–ª—å—à–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç'
		if call.message.text is not None:
			bot.edit_message_text(text=txt, chat_id=call.message.chat.id, message_id=call.message.message_id)
		elif call.message.caption is not None:
			bot.edit_message_caption(caption=txt, chat_id=call.message.chat.id, message_id=call.message.message_id)
		print(db.keys())
		return
	data = cursor.execute(f'SELECT event,bolnitsa FROM neko WHERE id = {call.from_user.id}')
	data = data.fetchone()
	if data is None:
		answer_callback_query(bot,call,'–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∏')
		return
	event = data[0]
	bolnitsa = int(data[1] - time.time())
	if event > 0:
		answer_callback_query(bot,call,'–¢—ã –≥—É–ª—è–µ—à—å')
		return
	if bolnitsa > 0:
		answer_callback_query(bot,call,'–¢—ã –≤ –±–æ–ª—å–Ω–∏—Ü–µ')
		return
	
	if cmd == "decline":
		one = int(args[1])
		two = int(args[2])
		if call.from_user.id != two:
			answer_callback_query(bot,call,'–ü–∞—à–æ–ª –Ω–∞—Ö—É–π')
			return
		del db[key]
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		chel = html.escape(call.from_user.first_name, quote = True)
		txt = '<a href="tg://user?id='+str(two)+'">'+str(chel)+'</a> –æ–∫–∞–∑–∞–ª—Å—è —Å—Å—ã–∫–ª–æ–º...'
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=txt)
	elif cmd == "aremove":
		one = int(args[1])
		two = int(args[2])
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		del db[key]
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
	elif cmd == "accept":
		one = int(args[1])
		two = int(args[2])
		cost = int(args[3])
		if call.from_user.id != two:
			answer_callback_query(bot,call,'–ü–∞—à–æ–ª –Ω–∞—Ö—É–π')
			return
		if check_all(bot, call.from_user.id) is not None :
			answer_callback_query(bot,call,check_all(bot, call.from_user.id))
			return
		struct = unpack(db[key])
		data = cursor.execute(f'SELECT * FROM neko WHERE id = {one}')
		data = data.fetchone()
		nam1 = data[1]
		phot1 = data[5]
		new_phot = data[33]
		if new_phot is not None:
			phot1 = new_phot
		skill1 = data[27]
		skill2 = data[28]
		gender1 = data[30]
		inv1 = unpack(data[36])
		bone_automate1 = data[37]
		equipped1 = data[38]
		skills1 = [skill1,skill2]

		data = cursor.execute(f'SELECT * FROM neko WHERE id = ' + str(call.from_user.id))
		data = data.fetchone()
		rep2 = data[2]
		nam2 = data[1]
		arena_kd2 = int(data[16] - time.time())
		c2 = data[11]
		phot2 = data[5]
		new_phot = data[33]
		if new_phot is not None:
			phot2 = new_phot
		skill1 = data[27]
		skill2 = data[28]
		gender2 = data[30]
		inv2 = unpack(data[36])
		bone_automate2 = data[37]
		equipped2 = data[38]
		skills2 = [skill1,skill2]
		if rep2 < 20:
			txt = '–ù–µ–∫–æ–¥–µ–≤–æ—á–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–±–µ'
			if gender2 == 1:
				txt = '–ù–µ–∫–æ–º–∞–ª—å—á–∏–∫ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–±–µ'
			answer_callback_query(bot,call,txt)
			return
		if arena_kd2 > 0:
			txt = '–ù–µ–∫–æ–¥–µ–≤–æ—á–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞'
			if gender2 == 1:
				txt = '–ù–µ–∫–æ–º–∞–ª—å—á–∏–∫ –Ω–µ –≥–æ—Ç–æ–≤'
			answer_callback_query(bot,call,txt)
			return
		if c2 < cost:
			answer_callback_query(bot,call,'–ê –¥–µ–Ω—å–≥–∏ –≥–¥–µ')
			return
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		
		use_bones1 = 0
		if bone_automate1 and inv1['bone'] > 0:
			use_bones1 = 1
			inv1['bone'] -= 1
		use_bones2 = 0
		if bone_automate2 and inv2['bone'] > 0:
			use_bones2 = 1
			inv2['bone'] -= 1
		maxhp1 = get_hp(equipped1)
		hp1 = maxhp1
		maxhp2 = get_hp(equipped2)
		hp2 = maxhp2
		equipped1 = minus_durability(equipped1)
		equipped2 = minus_durability(equipped2)
		cursor.execute(f"UPDATE neko SET arena_kd = {int(time.time() + BATTLE_TIMEOUT)},equipped  = {equipped1}, inventory = '{pack(inv1)}' WHERE id = {one}")
		cursor.execute(f"UPDATE neko SET arena_kd = {int(time.time() + BATTLE_TIMEOUT)},equipped  = {equipped2}, inventory = '{pack(inv2)}' WHERE id = {call.from_user.id}")

		field1 = generate_field(skills1)
		field2 = generate_field(skills2)
		im1 = get_pil(bot,phot1)
		im1 = img_resize(im1,781,800)
		im3 = Image.new(mode = 'RGB',size = (781,800))
		im3.paste(im1.convert('RGB'), (0,0))
		im1 = im3
		if use_bones2 > 0:
			filenam = 'bot/battle/bone_hands.png'
		else:
			filenam = 'bot/battle/hands.png'
		with Image.open(filenam) as im2:
			im1.paste(im2.convert('RGBA'), (0,0),im2)
		m = bot.send_photo(ME_CHATID, photo=send_pil(im1))
		image1 = m.photo[-1].file_id
		
		im1 = get_pil(bot,phot2)
		im1 = img_resize(im1,781,800)
		im3 = Image.new(mode = 'RGB',size = (781,800))
		im3.paste(im1.convert('RGB'), (0,0))
		im1 = im3
		if use_bones1 > 0:
			filenam = 'bot/battle/bone_hands.png'
		else:
			filenam = 'bot/battle/hands.png'
		with Image.open(filenam) as im2:
			im1.paste(im2.convert('RGBA'), (0,0),im2)
		m = bot.send_photo(ME_CHATID, photo=send_pil(im1))
		image2 = m.photo[-1].file_id
		struct['players'].append(two)
		struct['event'] = 1
		struct['wait'] = int(time.time()+1200)
		struct['bone_one'] = use_bones1
		struct['bone_two'] = use_bones2
		struct['imageone'] = image1
		struct['imagetwo'] = image2
		struct['nameone'] = nam1
		struct['nametwo'] = nam2
		struct['fieldone'] = field1
		struct['fieldtwo'] = field2
		db[key] = pack(struct)
		two = call.from_user.id
		txt = '–ù–µ–∫–æ–¥–µ–≤–æ—á–∫–∏ –≤—ã–π–¥—É—Ç –Ω–∞ –∞—Ä–µ–Ω—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, —Å–æ–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –ø–æ 4 –≤ —Ä—è–¥ —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏—Ö –Ω–µ–∫–æ–¥–µ–≤–æ—á–µ–∫ —Å —Ç—Ä–∏–±—É–Ω\n\nüü• üüß - –±–ª–æ–∫\n\nüü° üü¢ - –∞—Ç–∞–∫–∞\n\nüíô - –ø–ª—é—Å –æ–¥–∏–Ω —Ö–æ–¥'
		if gender1 == 1 or gender2 == 1:
			txt = '–ù–µ–∫–æ–¥–µ–≤–æ—á–∫–∏ –∏ –Ω–µ–∫–æ–º–∞–ª—å—á–∏–∫–∏ –≤—ã–π–¥—É—Ç –Ω–∞ –∞—Ä–µ–Ω—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, —Å–æ–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –ø–æ 4 –≤ —Ä—è–¥ —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏—Ö –Ω–µ–∫–æ —Å —Ç—Ä–∏–±—É–Ω\n\nüü• üüß - –±–ª–æ–∫\n\nüü° üü¢ - –∞—Ç–∞–∫–∞\n\nüíô - –ø–ª—é—Å –æ–¥–∏–Ω —Ö–æ–¥'
		if gender1 == 1 and gender2 == 1:
			txt = '–ù–µ–∫–æ–º–∞–ª—å—á–∏–∫–∏ –≤—ã–π–¥—É—Ç –Ω–∞ –∞—Ä–µ–Ω—É —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, —Å–æ–±–∏—Ä–∞–π—Ç–µ —Å–∏–º–≤–æ–ª—ã –ø–æ 4 –≤ —Ä—è–¥ —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏—Ö –Ω–µ–∫–æ–º–∞–ª—å—á–∏–∫–æ–≤ —Å —Ç—Ä–∏–±—É–Ω\n\nüü• üüß - –±–ª–æ–∫\n\nüü° üü¢ - –∞—Ç–∞–∫–∞\n\nüíô - –ø–ª—é—Å –æ–¥–∏–Ω —Ö–æ–¥'
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text=txt)
		b = [one,two]
		turn = random.choice(b)
		if turn == one:
			field = field1
			skills = skills1
			hpbal = hp1 <= hp2
		else:
			field = field2
			skills = skills2
			hpbal = hp2 <= hp1
		blocks1 = 0
		blocks2 = 0
		turns = get_player_turns(skills,hpbal,1)
		
		keyboard = types.InlineKeyboardMarkup(row_width=6)
		dat = 'pvp ' + str(one) + ' ' + str(two) + ' ' + str(turn) + ' ' + str(hp1) + ' ' + str(hp2) + ' ' + str(maxhp1) + ' ' + str(maxhp2) + ' ' + str(turns) + ' ' + str(blocks1) + ' ' + str(blocks2)
		field_keyboard(keyboard,dat,field,1,1,skills)
		txt = pvp_text(nam1,nam2,maxhp1,maxhp2,hp1,hp2,0,0,skills1,skills2)
		if turn == one:
			nam = nam1
		else:
			nam = nam2
		txt = txt + '–•–æ–¥–∏—Ç <a href="tg://user?id='+str(turn)+'">'+str(nam)+'</a>\n'
		txt = txt + '–û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤ –¥–æ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞:  ' + str(turns)
		time.sleep(15)
		if turn == one:
			image = image2
		else:
			image = image1
		m = bot.send_photo(call.message.chat.id, photo=image,caption = txt,reply_markup=keyboard)
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		struct['event'] = 2
		struct['message'] = m.id
		struct['skillone'] = skills1
		struct['skilltwo'] = skills2
		db[key] = pack(struct)
	elif cmd == "pvp":
		one = int(args[1])
		turn = int(args[3])
		hp1 = int(args[4])
		hp2 = int(args[5])
		maxhp1 = int(args[6])
		maxhp2 = int(args[7])
		turns = int(args[8])
		blocks1 = int(args[9])
		blocks2 = int(args[10])
		pos = int(args[11])
		rer1 = int(args[12])
		rer2 = int(args[13])
		if call.from_user.id != turn:
			answer_callback_query(bot,call,'–ù–µ —Ç–≤–æ–π —Ö–æ–¥')
			return
		struct = unpack(db[key])
		cost = struct['cost']
		field1 = struct['fieldone']
		field2 = struct['fieldtwo']
		selected = struct['selected']
		nam1 = struct['nameone']
		nam2 = struct['nametwo']
		image1 = struct['imageone']
		image2 = struct['imagetwo']
		skills1 = struct['skillone']
		skills2 = struct['skilltwo']
		bone1 = struct['bone_one']
		bone2 = struct['bone_two']
		starter = struct['starter']
		atack = 0
		ability = 0
		if turn == one:
			field = field1
			skills = skills1
			hp = hp1
			maxhp = maxhp1
		else:
			field = field2
			skills = skills2
			hp = hp2
			maxhp = maxhp2
		if pos < 0:
			ability = abs(pos)
			result = use_skill(bot,ability,selected,call,field) 
			if result[0] == -1:
				return
			selected = -1
			atack += result[1]
			if turn == one:
				blocks1 += result[2]
			else:
				blocks2 += result[2]
			turns += result[3]
		else:
			result = change_figures(bot,selected,pos,call,field)
			if result[0] == -1:
				selected = result[1]
			else:
				turns -= 1
				selected = -1

		result = field_calculate(field,skills,True)
		atack += result[0]
		turns += result[2]
		if turn == one:
			blocks1 += result[1]
			hp1 += result[3]
			if hp1 > maxhp1:
				hp1 = maxhp1
			if blocks1 > 3:
				blocks1 = 3
			atack = get_player_damage(skills,hp,maxhp,atack,turns,blocks1)
		else:
			blocks2 += result[1]
			hp2 += result[3]
			if hp2 > maxhp2:
				hp2 = maxhp2
			if blocks2 > 3:
				blocks2 = 3
			atack = get_player_damage(skills,hp,maxhp,atack,turns,blocks2)
		if turn == one and atack != 0:
			prev = hp2
			hp2, blocks2 = use_player_defence(skills2,atack,blocks2,hp2,False) 
			if bone1 != 0 and prev != hp2:
				bone_atack(field2,3)
			if hp2 <= 0:
					txt = pvp_text(nam1,nam2,maxhp1,maxhp2,hp1,hp2,blocks1,blocks2,skills1,skills2)
					bot.edit_message_caption(caption = txt, chat_id=call.message.chat.id, message_id=call.message.message_id)
					time.sleep(1)
					newcost = cost
					del db[key]
					data = cursor.execute(f'SELECT coins,wins,gender FROM neko WHERE id = {one}')
					data = data.fetchone()
					c1 = data[0]
					w1 = data[1]
					gender1 = data[2]
					c1 = c1 + newcost
					w1 = w1 + 1
					txt = '–ü–æ–±–µ–¥–∏–ª–∞ –¥—Ä—É–∂–±–∞, –Ω–∞–µ–±–∞–ª, –ø–æ–±–µ–¥–∏–ª–∞ <a href="tg://user?id='+str(one)+'">'+str(nam1)+'</a>. –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª ' + str(newcost) + ' üí∞, –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∞—Ä–µ–Ω—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–π –∏ –æ–Ω–∏ –Ω–µ –≤–∑—è–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞–º –æ—Ç–¥–æ—Ö–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã —á–∞—Å'
					if gender1 == 1:
						txt = '–ü–æ–±–µ–¥–∏–ª–∞ –¥—Ä—É–∂–±–∞, –Ω–∞–µ–±–∞–ª, –ø–æ–±–µ–¥–∏–ª <a href="tg://user?id='+str(one)+'">'+str(nam1)+'</a>. –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª ' + str(newcost) + ' üí∞, –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∞—Ä–µ–Ω—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–π –∏ –æ–Ω–∏ –Ω–µ –≤–∑—è–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞–º –æ—Ç–¥–æ—Ö–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã —á–∞—Å'
					bot.send_message(call.message.chat.id, txt )
					data = cursor.execute(f'SELECT coins FROM neko WHERE id = {two}')
					data = data.fetchone()
					c2 = data[0]
					c2 = c2 - cost
					cursor.execute(f"UPDATE neko SET wins = {w1}, coins = {c1} WHERE id = {one}")
					cursor.execute(f"UPDATE neko SET coins = {c2} WHERE id = {two}")
					return
		if turn == two and atack != 0:
			prev = hp1
			hp1, blocks1 = use_player_defence(skills1,atack,blocks1,hp1,False) 
			if bone2 != 0 and prev != hp1:
				bone_atack(field1,3)
			if hp1 <= 0:
					txt = pvp_text(nam1,nam2,maxhp1,maxhp2,hp1,hp2,blocks1,blocks2,skills1,skills2)
					bot.edit_message_caption(caption = txt, chat_id=call.message.chat.id, message_id=call.message.message_id)
					time.sleep(1)
					newcost = cost
					del db[key]
					data = cursor.execute(f'SELECT coins,wins,gender FROM neko WHERE id = {two}')
					data = data.fetchone()
					c1 = data[0]
					w1 = data[1]
					gender2 = data[2]
					c1 = c1 + newcost
					w1 = w1 + 1
					txt = '–ü–æ–±–µ–¥–∏–ª–∞ –¥—Ä—É–∂–±–∞, –Ω–∞–µ–±–∞–ª, –ø–æ–±–µ–¥–∏–ª–∞ <a href="tg://user?id='+str(two)+'">'+str(nam2)+'</a>. –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª ' + str(newcost) + ' üí∞, –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∞—Ä–µ–Ω—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–π –∏ –æ–Ω–∏ –Ω–µ –≤–∑—è–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞–º –æ—Ç–¥–æ—Ö–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã —á–∞—Å'
					if gender2 == 1:
						txt = '–ü–æ–±–µ–¥–∏–ª–∞ –¥—Ä—É–∂–±–∞, –Ω–∞–µ–±–∞–ª, –ø–æ–±–µ–¥–∏–ª <a href="tg://user?id='+str(two)+'">'+str(nam2)+'</a>. –í—ã–∏–≥—Ä—ã—à —Å–æ—Å—Ç–∞–≤–∏–ª ' + str(newcost) + ' üí∞, –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∞—Ä–µ–Ω—ã –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è –±–æ–π –∏ –æ–Ω–∏ –Ω–µ –≤–∑—è–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–∞—Ç—å –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞–º –æ—Ç–¥–æ—Ö–Ω—É—Ç—å —Ö–æ—Ç—è –±—ã —á–∞—Å'
					bot.send_message(call.message.chat.id, txt)
					data = cursor.execute(f'SELECT coins FROM neko WHERE id = {one}')
					data = data.fetchone()
					c2 = data[0]
					c2 = c2 - cost
					cursor.execute(f"UPDATE neko SET wins = {w1}, coins = {c1} WHERE id = {two}")
					cursor.execute(f"UPDATE neko SET coins = {c2} WHERE id = {one}")
					return
		if turns == 0:
			rer1 = 1
			rer2 = 1
			if starter == 1:
				struct['starter'] = 0
				turns = 1
			else:
				turns = 2
			
			if turn == one:
				turn = two
				field = field2
				skills = skills2
				hpbal = hp2 <= hp1
			else:
				turn = one
				field = field1
				skills = skills1
				hpbal = hp1 <= hp2
			turns = get_player_turns(skills,hpbal,turns)

		if turn == one:
			image = image2
		else:
			image = image1

		keyboard = types.InlineKeyboardMarkup(row_width=6)
		dat = 'pvp ' + str(one) + ' ' + str(two) + ' ' + str(turn) + ' ' + str(hp1) + ' ' + str(hp2) + ' ' + str(maxhp1) + ' ' + str(maxhp2) + ' ' + str(turns) + ' ' + str(blocks1) + ' ' + str(blocks2)
		field_keyboard(keyboard,dat,field,rer1,rer2,skills,selected)
		txt = pvp_text(nam1,nam2,maxhp1,maxhp2,hp1,hp2,blocks1,blocks2,skills1,skills2)
		if turn == one:
			nam = nam1
		else:
			nam = nam2
		txt = txt + '–•–æ–¥–∏—Ç <a href="tg://user?id='+str(turn)+'">'+str(nam)+'</a>\n'
		txt = txt + '–û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤ –¥–æ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞:  ' + str(turns)
		struct['selected'] = selected
		db[key] = pack(struct)
		time.sleep(1)
		bot.edit_message_media(media=telebot.types.InputMedia(media=image,caption = txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)

	elif cmd == "pve":
		turns = int(args[2])
		blocks = int(args[3])
		targ = int(args[4])
		pos = int(args[5])
		rer1 = int(args[6])
		rer2 = int(args[7])
		atack = 0
		ability = 0

		struct = unpack(db[key])
		mas = struct['map']
		generation = struct['generation']
		co = struct['co']
		wh = struct['wh']
		mo = struct['mo']
		he = struct['he']
		field = struct['field']
		selected = struct['selected']
		next_x = struct['cur_x']
		next_y = struct['cur_y']
		hp = struct['hp']
		maxhp = struct['maxhp']
		nam = struct['name']
		gender = struct['gender']
		skills = struct['temp_skills']
		enemies = struct['enemies']
		
		if pos < 0:
			ability = abs(pos)
			if ability >= 200:
				result = change_target(bot,ability,targ,call,enemies)
				if result == -1:
					return
				targ = result
			else:
				result = use_skill(bot,ability,selected,call,field) 
				if result[0] == -1:
					return
				selected = -1
				atack += result[1]
				blocks += result[2]
				turns += result[3]
		else:
			result = change_figures(bot,selected,pos,call,field)
			if result[0] == -1:
				selected = result[1]
			else:
				turns -= 1
				selected = -1
		result = field_calculate(field,skills,True)
		atack += result[0]
		blocks += result[1]
		turns += result[2]
		hp += result[3]
		if hp > maxhp:
			hp = maxhp
		if blocks > 3:
			blocks = 3
		
		atack = get_player_damage(skills,hp,maxhp,atack,turns,blocks)
		turns = player_atack(enemies,targ,turns,atack,False)
	  
		if turns <= 0:
			rer1 = 1
			rer2 = 1
			turns = get_player_turns(skills, hp <= sum_enemies_hp(enemies), 2)
			enemy_atack = 0
			#–ê–¢–ê–ö–ê –í–†–ê–ì–û–í –ö–†–û–ú–ï –°–õ–ò–ó–ù–Ø
			for i in range(3):
				enemy_atack += enemies_turn(enemies,i)
			#–ê–¢–ê–ö–ê –°–õ–ò–ó–ù–Ø
			for i in range(3):
				if enemies[i]['id'] == 6:
					for j in range(3):
						if enemies[j]['id'] == 0:
							enemies[j] = enemy_list[7].copy()
							break
					break
					
			hp, blocks = use_player_defence(skills,enemy_atack,blocks,hp,False) 
			if hp <= 0:
					txt = hp_bar(nam,maxhp,hp)
					phot = enemy_photos[f"{enemies[0]['id']} {enemies[1]['id']} {enemies[2]['id']}"]
					if gender == 0:
						txt += '\n\n' + nam + ' –≤—ã—à–ª–∞ –∏–∑ –ø–æ—Ä—Ç–∞–ª–∞ –≤—Å—è –ø–æ–∫—Ä—ã—Ç–∞—è —Å–∏–Ω—è–∫–∞–º–∏ –∏ —Å—Ç—Ä–∞–Ω–Ω–æ–π –±–µ–ª–æ–π –∂–∏–¥–∫–æ—Å—Ç—å—é. –ë–æ—é—Å—å –¥–∞–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ —Å –Ω–µ–π –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑'
					else:
						txt += '\n\n' + nam + ' –≤—ã—à–µ–ª –∏–∑ –ø–æ—Ä—Ç–∞–ª–∞ –≤–µ—Å—å –ø–æ–∫—Ä—ã—Ç—ã–π —Å–∏–Ω—è–∫–∞–º–∏ –∏ —Å—Ç—Ä–∞–Ω–Ω–æ–π –±–µ–ª–æ–π –∂–∏–¥–∫–æ—Å—Ç—å—é. –ë–æ—é—Å—å –¥–∞–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ —Å –Ω–∏–º –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑'
					del db[key]
					bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)
					time.sleep(1)
					return
		
		if sum_enemies_hp(enemies) <= 0:
			txt = hp_bar(nam,maxhp,hp)
			if gender == 0:
				txt += '\n\n–¢–≤–æ—è –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞ –ø–æ–±–µ–¥–∏–ª–∞!'
			else:
				txt += '\n\n–¢–≤–æ–π –Ω–µ–∫–æ–º–∞–ª—å—á–∏–∫ –ø–æ–±–µ–¥–∏–ª!'
			generation[next_y][next_x] = 0
			struct['hp'] = hp
			db[key] = pack(struct)
			txt += f'\n\n–î–æ–±—ã—á–∞:   {co} üí∞   {wh} üç´   {mo} ‚ö°Ô∏è   {he} üçº\n\n'
			txt += map_text(mas)
			keyboard = types.InlineKeyboardMarkup(row_width=4)
			dungeon_keyboard(keyboard,idk)
			bot.edit_message_media(media=telebot.types.InputMedia(media='AgACAgIAAx0CZQN7rQACwsFi8ct1qI3M_i1Bt1Tk_WvAbq7BWAACqcQxG-SBkUvkDVBnBMaohgEAAwIAA3MAAykE',caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)
			time.sleep(1)
			return
		targ = change_zero_target(targ,enemies)
		keyboard = types.InlineKeyboardMarkup(row_width=6)
		dat = f'pve {idk} {turns} {blocks} {targ}'
		target_keyboard(keyboard,targ,dat,rer1,rer2)
		field_keyboard(keyboard,dat,field,rer1,rer2,skills,selected)
		struct['selected'] = selected
		struct['hp'] = hp
		db[key] = pack(struct)
		txt = pve_text(enemies,nam,hp,maxhp,blocks,skills)
		txt +=  f"–û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤ –¥–æ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞:  {turns}"
		phot = enemy_photos[f"{enemies[0]['id']} {enemies[1]['id']} {enemies[2]['id']}"]
	   
		time.sleep(1)
		bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=keyboard)
	elif cmd == "interact":
		action = int(args[2])
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		time.sleep(1)
		struct = unpack(db[key])
		mas = struct['map']
		generation = struct['generation']
		co = struct['co']
		wh = struct['wh']
		mo = struct['mo']
		he = struct['he']
		next_x = struct['cur_x']
		next_y = struct['cur_y']
		hp = struct['hp']
		maxhp = struct['maxhp']
		nam = struct['name']
		gender = struct['gender']
		if action == 1:
			d = random.randint(1,10)
			co = co - 2
			if d != 10:
				phot = 'AgACAgIAAx0CZQN7rQACwwRi8t920_InxPRHCFJRBhJHi609NAAC274xGxy_mEtJHCxhP9SvfQEAAwIAA3MAAykE'
				new_txt = '–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ê –Ω–∞ —á—Ç–æ —Ç—ã –≤–æ–æ–±—â–µ –Ω–∞–¥–µ—è–ª—Å—è?'
			else:
				mo = mo + 1
				phot = 'AgACAgIAAx0CZQN7rQACwwJi8t1lkPUz0QvhDBUeUT7KBUQJgQAC2b4xGxy_mEtae5LvKUzKfgEAAwIAA3MAAykE'
				new_txt = '–ß—Ç–æ –∂, —ç—Ç–æ –º–æ–∂–Ω–æ –Ω–∞–∑–≤–∞—Ç—å —á—É–¥–æ–º. –í–º–µ—Å—Ç–æ –≤–æ–¥—ã –≤ —Ñ–æ–Ω—Ç–∞–Ω–µ –Ω–∞—á–∞–ª —Ç–µ—á—å —Ä–æ–∑–æ–≤—ã–π –º–æ–Ω—Å—Ç—Ä ‚ö°Ô∏è! –õ—É—á—à–µ –±—É–¥–µ—Ç –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π –Ω–µ–º–Ω–æ–≥–æ'
		elif action == 3:
			hp = maxhp
			phot = 'AgACAgIAAx0CZQN7rQACwgZi7aTwuv6M-OsOvCsRGijo6gohwwACZb8xG3RJaUufsVKea9BUKAEAAwIAA3MAAykE'
			new_txt = nam + ' –ø–æ–µ–ª–∞ –Ω–µ–º–Ω–æ–≥–æ –ø–∏—Ü—Ü—ã –∏ —Ç–µ–ø–µ—Ä—å —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –∑–∞–º–µ—Ç–Ω–æ –ª—É—á—à–µ!'
			if gender == 1:
				new_txt = nam + ' –ø–æ–µ–ª –Ω–µ–º–Ω–æ–≥–æ –ø–∏—Ü—Ü—ã –∏ —Ç–µ–ø–µ—Ä—å —á—É–≤—Å—Ç–≤—É–µ—Ç —Å–µ–±—è –∑–∞–º–µ—Ç–Ω–æ –ª—É—á—à–µ!'
			new_txt += hp_bar(nam,maxhp,hp)
		elif action == 2:
			d = random.randint(1,2)
			if d == 1:
				he = he + 1
				phot = 'AgACAgIAAx0CZQN7rQACwd1i7HKMaDbODOjA7IV5RYxI01bcTAACwMAxG3RJYUvRcTOFHbiG3QEAAwIAA3MAAykE'
				new_txt = nam + ' –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–±—Ä–∞–ª–∞ –±—É—Ç—ã–ª—å –∞–Ω—Ç–∏–ø–æ—Ö–º–µ–ª–∏–Ω–∞ üçº –∏ –æ—Ç–æ—à–ª–∞ –æ—Ç –±–µ—Ä–µ–≥–∞. –ö —Å—á–∞—Å—Ç—å—é, –Ω–∏—á–µ–≥–æ –æ–ø–∞—Å–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–æ –±—É–¥–µ—Ç –ª–∏ —Ç–∞–∫ –∏ –≤–ø—Ä–µ–¥—å?'
				if gender == 1:
					new_txt = nam + ' –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–±—Ä–∞–ª –±—É—Ç—ã–ª—å –∞–Ω—Ç–∏–ø–æ—Ö–º–µ–ª–∏–Ω–∞ üçº –∏ –æ—Ç–æ—à–µ–ª –æ—Ç –±–µ—Ä–µ–≥–∞. –ö —Å—á–∞—Å—Ç—å—é, –Ω–∏—á–µ–≥–æ –æ–ø–∞—Å–Ω–æ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –Ω–æ –±—É–¥–µ—Ç –ª–∏ —Ç–∞–∫ –∏ –≤–ø—Ä–µ–¥—å?'
			else:
				phot = 'AgACAgIAAx0CZQN7rQACwfxi7Zem-ltmGFEQZvc-sg97JYwNewACTb8xG3RJaUs9wsxj9zofxwEAAwIAA3MAAykE'
				new_txt = '–û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –≤ –æ–∑–µ—Ä–µ –∂–∏–≤—ë—Ç –æ–≥—Ä–æ–º–Ω—ã–π —Ç–µ–Ω—Ç–∞–∫–ª–µ–≤—ã–π –º–æ–Ω—Å—Ç—Ä! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—é—Ç —Ç–µ–Ω—Ç–∞–∫–ª–µ–≤—ã–µ –º–æ–Ω—Å—Ç—Ä—ã —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞–º–∏... üíî'
				if gender == 1:
					new_txt = '–û–∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –≤ –æ–∑–µ—Ä–µ –∂–∏–≤—ë—Ç –æ–≥—Ä–æ–º–Ω—ã–π —Ç–µ–Ω—Ç–∞–∫–ª–µ–≤—ã–π –º–æ–Ω—Å—Ç—Ä! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º—ã –∑–Ω–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—é—Ç —Ç–µ–Ω—Ç–∞–∫–ª–µ–≤—ã–µ –º–æ–Ω—Å—Ç—Ä—ã —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ –Ω–µ–∫–æ–º–∞–ª—å—á–∏–∫–∞–º–∏... üíî'
				hp = hp - 2
				new_txt += hp_bar(nam,maxhp,hp)
				if hp <= 0:
					if gender == 0:
						new_txt += '\n\n' + nam + ' –≤—ã—à–ª–∞ –∏–∑ –ø–æ—Ä—Ç–∞–ª–∞ –≤—Å—è –ø–æ–∫—Ä—ã—Ç–∞—è —Å–∏–Ω—è–∫–∞–º–∏ –∏ —Å—Ç—Ä–∞–Ω–Ω–æ–π –±–µ–ª–æ–π –∂–∏–¥–∫–æ—Å—Ç—å—é. –ë–æ—é—Å—å –¥–∞–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ —Å –Ω–µ–π –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑'
					else:
						new_txt += '\n\n' + nam + ' –≤—ã—à–µ–ª –∏–∑ –ø–æ—Ä—Ç–∞–ª–∞ –≤–µ—Å—å –ø–æ–∫—Ä—ã—Ç—ã–π —Å–∏–Ω—è–∫–∞–º–∏ –∏ —Å—Ç—Ä–∞–Ω–Ω–æ–π –±–µ–ª–æ–π –∂–∏–¥–∫–æ—Å—Ç—å—é. –ë–æ—é—Å—å –¥–∞–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å, —á—Ç–æ —Å –Ω–∏–º –ø—Ä–æ–∏–∑–æ—à–ª–æ. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–µ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑'
					del db[key]
					bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=new_txt,type="photo",parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)
					return              
		generation[next_y][next_x] = 0
		struct['co'] = co
		struct['wh'] = wh
		struct['mo'] = mo
		struct['he'] = he
		struct['hp'] = hp
		db[key] = pack(struct)
		txt = new_txt + f'\n\n–î–æ–±—ã—á–∞:   {co} üí∞   {wh} üç´   {mo} ‚ö°Ô∏è   {he} üçº\n\n'
		txt += map_text(mas)
		keyboard = types.InlineKeyboardMarkup(row_width=4)
		dungeon_keyboard(keyboard,idk)
		bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)
   
	elif cmd == "move":
		d = int(args[2])
		struct = unpack(db[key])
		mas = struct['map']
		generation = struct['generation']
		co = struct['co']
		wh = struct['wh']
		mo = struct['mo']
		he = struct['he']
		cur_x = struct['cur_x']
		cur_y = struct['cur_y']
		hp = struct['hp']
		maxhp = struct['maxhp']
		nam = struct['name']
		gender = struct['gender']
		skills = struct['skills']
		if d == 1 and ((cur_y-3) < 0 or mas[cur_y-1][cur_x] == 0):
			answer_callback_query(bot,call,'–¢—É–ø–∏–∫')
			return
		elif d == 2 and ((cur_x+3) > 9 or mas[cur_y][cur_x+1] == 0):
			answer_callback_query(bot,call,'–¢—É–ø–∏–∫')
			return
		elif d == 3 and ((cur_y+3) > 12 or mas[cur_y+1][cur_x] == 0):
			answer_callback_query(bot,call,'–¢—É–ø–∏–∫')
			return
		elif d == 4 and ((cur_x-3) < 0 or mas[cur_y][cur_x-1] == 0):
			answer_callback_query(bot,call,'–¢—É–ø–∏–∫')
			return
		mas[cur_y][cur_x] = 4
		if d == 1:
			next_x = cur_x
			next_y = cur_y-3
		elif d == 2:
			next_x = cur_x+3
			next_y = cur_y
		elif d == 3:
			next_x = cur_x
			next_y = cur_y+3
		elif d == 4:
			next_x = cur_x-3
			next_y = cur_y
		mas[next_y][next_x] = 3
		if generation[cur_y][cur_x] != 0 and generation[cur_y][cur_x] != 1:
			mas[cur_y][cur_x] = 5
		next_gen = generation[next_y][next_x]
		keyboard = types.InlineKeyboardMarkup(row_width=4)
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		time.sleep(1)
		if next_gen == 1:
			phot = 'AgACAgIAAx0CZQN7rQACwxZi8uNUoMtUGP6J96D7X-pveAGj3wAC374xGxy_mEsWdB1RBPi4nQEAAwIAA3MAAykE'
			new_txt = '–ö —Å—á–∞—Å—Ç—å—é, –ø–æ—Ä—Ç–∞–ª –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–µ–ª—Å—è. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –≤–µ—Ä–Ω—É—Ç—å—Å—è?'
			if gender == 1:
				new_txt = '–ö —Å—á–∞—Å—Ç—å—é, –ø–æ—Ä—Ç–∞–ª –Ω–∏–∫—É–¥–∞ –Ω–µ –¥–µ–ª—Å—è. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –≤–µ—Ä–Ω—É—Ç—å—Å—è?'
		elif next_gen == 2:
			wh = wh + 1
			generation[next_y][next_x] = 0
			phot = 'AgACAgIAAx0CZQN7rQACwvRi8tr6ixHXhD5-CLOdFikGnPqDcgACzb4xGxy_mEvGxDZ1JQABuSIBAAMCAANzAAMpBA'
			new_txt = '–ü–æ—Ö–æ–∂–µ, —ç—Ç–∞ –∫–æ—Ä–æ–±–∫–∞ - —á–∞—Å—Ç—å –ø—Ä–∏–ø–∞—Å–æ–≤ –ø—Ä–æ–ø–∞–≤—à–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏. –í–Ω—É—Ç—Ä–∏ –ª–µ–∂–∞–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥–∫–∏ –∏ —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–∏—Å–∫–∞—Å–∞ üç´'
			if gender == 1:
				new_txt = '–ü–æ—Ö–æ–∂–µ, —ç—Ç–∞ –∫–æ—Ä–æ–±–∫–∞ - —á–∞—Å—Ç—å –ø—Ä–∏–ø–∞—Å–æ–≤ –ø—Ä–æ–ø–∞–≤—à–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏. –í–Ω—É—Ç—Ä–∏ –ª–µ–∂–∞–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—É—Å—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥–∫–∏ –∏ —Å–æ–≤—Å–µ–º –Ω–µ–º–Ω–æ–≥–æ –≤–∏—Å–∫–∞—Å–∞ üç´'
		elif next_gen == 3:
			co = co + 10
			generation[next_y][next_x] = 0
			phot = 'AgACAgIAAx0CZQN7rQACwvhi8tv5UTGRY0Ly30leGF-iVeph4AAC074xGxy_mEtCwi5QjU5PowEAAwIAA3MAAykE'
			new_txt = '–°—Ç—Ä–∞–Ω–Ω—ã–π –∫—Ä–∏—Å—Ç–∞–ª–ª, –ø–µ—Ä–µ–ª–∏–≤–∞—é—â–∏–π—Å—è –≤—Å–µ–º–∏ —Ü–≤–µ—Ç–∞–º–∏ —Ä–∞–¥—É–≥–∏, –ø—Ä–µ–≥—Ä–∞–¥–∏–ª –≤–∞–º –ø—É—Ç—å. –ö —Å—á–∞—Å—Ç—å—é, –≤–µ—Å–∏—Ç –æ–Ω –Ω–µ –æ—á–µ–Ω—å –º–Ω–æ–≥–æ. –ï–≥–æ –º–æ–∂–Ω–æ —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–¥–∞—Ç—å üí∞, –µ—Å–ª–∏ —É–¥–∞—Å—Ç—Å—è –≤—ã–Ω–µ—Å—Ç–∏'
		elif next_gen == 4:
			callback_button0 = types.InlineKeyboardButton(text = '–ë—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç–∫—É üí∏',callback_data = f'interact {idk} 1')
			keyboard.add(callback_button0)
			phot = 'AgACAgIAAx0CZQN7rQACwwRi8t920_InxPRHCFJRBhJHi609NAAC274xGxy_mEtJHCxhP9SvfQEAAwIAA3MAAykE'
			new_txt = '–í–µ—Å—å–º–∞ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω —Å—Ç–æ—è–ª –ø–æ—Å—Ä–µ–¥–∏ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–∑–µ—Ä–∞. –ö—Ç–æ –∏ –∑–∞—á–µ–º –µ–≥–æ —Å—é–¥–∞ –ø–æ—Å—Ç–∞–≤–∏–ª? –ö–∞–∫ –±—ã —Ç–æ –Ω–∏ –±—ã–ª–æ, ' + nam + ' –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –∫–∏–Ω—É—Ç—å —Ç—É–¥–∞ –º–æ–Ω–µ—Ç–∫—É'
			if gender == 1:
				new_txt = '–í–µ—Å—å–º–∞ –∏–∑—ã—Å–∫–∞–Ω–Ω—ã–π —Ñ–æ–Ω—Ç–∞–Ω —Å—Ç–æ—è–ª –ø–æ—Å—Ä–µ–¥–∏ –Ω–µ–±–æ–ª—å—à–æ–≥–æ –æ–∑–µ—Ä–∞. –ö—Ç–æ –∏ –∑–∞—á–µ–º –µ–≥–æ —Å—é–¥–∞ –ø–æ—Å—Ç–∞–≤–∏–ª? –ö–∞–∫ –±—ã —Ç–æ –Ω–∏ –±—ã–ª–æ, ' + nam + ' –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∫–∏–Ω—É—Ç—å —Ç—É–¥–∞ –º–æ–Ω–µ—Ç–∫—É'
		elif next_gen == 5:
			callback_button0 = types.InlineKeyboardButton(text = '–ù–∞–±—Ä–∞—Ç—å üçº',callback_data = f'interact {idk} 2')
			keyboard.add(callback_button0)
			phot = 'AgACAgIAAx0CZQN7rQACwd1i7HKMaDbODOjA7IV5RYxI01bcTAACwMAxG3RJYUvRcTOFHbiG3QEAAwIAA3MAAykE'
			new_txt =  '–î–∞ —ç—Ç–æ –∂–µ —Ü–µ–ª–æ–µ –æ–∑–µ—Ä–æ –∞–Ω—Ç–∏–ø–æ—Ö–º–µ–ª–∏–Ω–∞! –ù–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ –≤–µ–∫–æ–≤ —ç—Ç–∞ –∂–∏–¥–∫–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –æ—Ç –ø–æ—Ö–º–µ–ª—å—è, –∏ –ª–∏—à—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–ª–∏, —á—Ç–æ –æ–Ω –ª–µ—á–∏—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–æ–ª–µ–∑–Ω–∏ —Ç–æ–∂–µ. –ù–æ —Ä–µ—Ü–µ–ø—Ç –±—ã–ª –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É—Ç–µ—Ä—è–Ω, –Ω–µ–ª—å–∑—è —É–ø—É—Å–∫–∞—Ç—å —Ç–∞–∫—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å'
			new_txt += hp_bar(nam,maxhp,hp)
		elif next_gen == 6:
			callback_button0 = types.InlineKeyboardButton(text = '–°—ä–µ—Å—Ç—å –ø–∏—Ü—Ü—É üçï',callback_data = f'interact {idk} 3')
			keyboard.add(callback_button0)
			phot = 'AgACAgIAAx0CZQN7rQACwwABYvLc79baJMP4YDV4iM_6n0U1Y0kAAte-MRscv5hL2-WMSvjaptEBAAMCAANzAAMpBA'
			new_txt = '–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –≤—ã –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Å—Ç–æ–≤ –ø–∏—Ü—Ü—ã. –ù–∞–π—Ç–∏ –¥–∏–∫–æ—Ä–∞—Å—Ç—É—â—É—é –ø–∏—Ü—Ü—É - –±–æ–ª—å—à–∞—è —É–¥–∞—á–∞. ' + nam + ' –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å –ø–ª–æ–¥—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã'
			if gender == 1:
				new_txt = '–í–∞–º –ø–æ–≤–µ–∑–ª–æ, –≤—ã –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫—É—Å—Ç–æ–≤ –ø–∏—Ü—Ü—ã. –ù–∞–π—Ç–∏ –¥–∏–∫–æ—Ä–∞—Å—Ç—É—â—É—é –ø–∏—Ü—Ü—É - –±–æ–ª—å—à–∞—è —É–¥–∞—á–∞. ' + nam + ' –º–æ–∂–µ—Ç —Å—ä–µ—Å—Ç—å –ø–ª–æ–¥—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤–æ–∏ —Å–∏–ª—ã'
			new_txt += hp_bar(nam,maxhp,hp)
		elif next_gen == 7:
			phot = 'AgACAgIAAx0CZQN7rQACwvZi8tuNp4bk85D-ypnCu5OUalrZwwAC0L4xGxy_mEvzEzdkcbipPgEAAwIAA3MAAykE'
			generation[next_y][next_x] = 0
			d = random.randint(1,2)
			if d == 1:
				letters = ['<b>"–î–µ–Ω—å 1. LGBT –º–∏—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∑–µ–º–ª—ë–π –Ω–∞ –≥–ª—É–±–∏–Ω–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 50 –∫–º, –∏ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–ª—å—é –Ω–∞—à–µ–π —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –∑–∞–ª–µ–∂–µ–π –∞–Ω—Ç–∏–ø–æ—Ö–º–µ–ª–∏–Ω–∞, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –≥–µ–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –û–¥–Ω–∞–∫–æ, –Ω–∞—Å—Ç–æ—è—â–∞—è, –º–∞–ª–æ –∫–æ–º—É –∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ü–µ–ª—å - –¥–æ–∫–∞–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ LGBTQ+ –º–∏—Ä–∞"</b>',
				'<b>"–î–µ–Ω—å 2. –†–∞–∑–º–µ—Ä—ã —ç—Ç–æ–π —Å–µ—Ç–∏ –ø–µ—â–µ—Ä –∏ –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å –µ—ë —Ç–æ–Ω–Ω–µ–ª–µ–π –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∏–≤–ª—è—é—Ç. –ú—ã –≤ –ø—É—Ç–∏ —É–∂–µ —Ü–µ–ª—ã–π –¥–µ–Ω—å, –æ–¥–Ω–∞–∫–æ, —Å–Ω–æ–≤–∞ –∏ —Å–Ω–æ–≤–∞ –∫–∞–∫–∏–º-—Ç–æ –æ–±—Ä–∞–∑–æ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∫ –ø–æ—Ä—Ç–∞–ª—É! –ö —Å—á–∞—Å—Ç—å—é, —è –¥–æ–¥—É–º–∞–ª—Å—è –Ω–∞—á–∞—Ç—å —Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É"</b>',
				'<b>"–î–µ–Ω—å 3. –ù–∞—à–∏ –ø—Ä–∏–ø–∞—Å—ã —Å—Ç—Ä–µ–º–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ —Å—Ç–æ–∏–ª–æ –±—Ä–∞—Ç—å –≤–æ–¥–∫–∏ –±–æ–ª—å—à–µ, —á–µ–º –µ–¥—ã. –ö —Ç–æ–º—É –∂–µ, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –∏ —Ç–æ–ø–ª–∏–≤–æ –¥–ª—è –æ–≥–Ω–µ–º—ë—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã –æ—Ç–±–∏–≤–∞–µ–º—Å—è –æ—Ç –ø–æ–ª—á–∏—â —Ñ—É—Ä—Ä–∏. –ü–æ—Å–∫–æ—Ä–µ–µ –±—ã —ç—Ç–æ –≤—Å—ë –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å"</b>',
				'<b>"–î–µ–Ω—å 4. –°–µ–≥–æ–¥–Ω—è –Ω–∞–º —É–ª—ã–±–Ω—É–ª–∞—Å—å —É–¥–∞—á–∞, –Ω–∞—à–ª–∏ —Ü–µ–ª–æ–µ –æ–∑–µ—Ä–æ –∞–Ω—Ç–∏–ø–æ—Ö–º–µ–ª–∏–Ω–∞! –ù–∏–∫—Ç–æ –Ω–µ –≤–µ—Ä–∏–ª –≤ —Ç–æ, —á—Ç–æ –≥–¥–µ-—Ç–æ –µ—â—ë –æ—Å—Ç–∞–ª–∞—Å—å —Ö–æ—Ç—è –±—ã –∫–∞–ø–ª—è, –Ω–æ –≤–æ—Ç –∂–µ –æ–Ω! –ß—Ç–æ –∂, –≤–æ—Ç –ø–æ—è–≤–∏–ª—Å—è –∏ –ø–æ–≤–æ–¥ –≤—ã–ø–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø–∞—Å—ã –≤–æ–¥–∫–∏"</b>',
				'<b>"–î–µ–Ω—å 5. –û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —è –∏ –ø–∞—Ä–µ–Ω—å –ø–æ –∏–º–µ–Ω–∏ –†–∏–∫–∞—Ä–¥–æ. –û—Å—Ç–∞–ª—å–Ω—ã–µ –±—É—Ö–∏–µ –ø–æ—à–ª–∏ –∫—É–ø–∞—Ç—å—Å—è –≤ –æ–∑–µ—Ä–µ, –∏ –Ω–∞ –º–æ–∏—Ö –≥–ª–∞–∑–∞—Ö –∏—Ö –≤—Å–µ—Ö –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —á—Ç–æ-—Ç–æ —É—Ç–∞—â–∏–ª–æ –ø–æ–¥ –≤–æ–¥—É. –ú—ã —Å—Ä–∞–∑—É –∂–µ –ø–æ–ø–ª—ã–ª–∏ –Ω–∞ –ø–æ–º–æ—â—å, –Ω–æ –Ω–∏–∫–æ–≥–æ –Ω–µ –Ω–∞—à–ª–∏... –ù—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å"</b>',
				'<b>"–î–µ–Ω—å 6. –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –Ω–∞–º —É–¥–∞–ª–æ—Å—å –Ω–µ–º–Ω–æ–≥–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –≤ –¥–æ—Ä–æ–≥–µ. –†–∏–∫–∞—Ä–¥–æ –æ–∫–∞–∑–∞–ª—Å—è –∏–∑–≤–µ—Å—Ç–Ω—ã–º –±—Ä–∞–∑–∏–ª—å—Å–∫–∏–º —Ç–∞–Ω—Ü–æ—Ä–æ–º, –∞ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è —Å—é–¥–∞ –≤ –ø–æ–∏—Å–∫–∞—Ö –¥–æ—Å—Ç–æ–π–Ω–æ–≥–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –¥–ª—è —Ñ–ª–µ–∫—Å –±–∞—Ç—Ç–ª–∞. –ò –≤–æ—Ç, –∫–æ–≥–¥–∞ –ø–æ—Ä—Ç–∞–ª —É–∂–µ –≤–∏–¥–Ω–µ–ª—Å—è –Ω–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–µ, –Ω–∞–¥–æ –º–Ω–æ–π –ø—Ä–æ–ª–µ—Ç–µ–ª–∞ —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∞—è —Ñ–∏–≥—É—Ä–∞ –∏ —É–Ω–µ—Å–ª–∞ –†–∏–∫–∞—Ä–¥–æ —Å —Å–æ–±–æ–π"</b>'
				'<b>"–î–µ–Ω—å 7. –ù–µ–ª—å–∑—è —ç—Ç–æ —Ç–∞–∫ –æ—Å—Ç–∞–≤–ª—è—Ç—å, —è –¥–æ–ª–∂–µ–Ω —Å–ø–∞—Å—Ç–∏ —Å–≤–æ–µ–≥–æ –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞. –ò–º–µ–Ω–Ω–æ —Å —Ç–∞–∫–∏–º–∏ –º—ã—Å–ª—è–º–∏ —è –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –≤ –ø—É—Ç—å. –ì–Ω–µ–∑–¥–æ, –∫—É–¥–∞ —Ç–æ —Å—É—â–µ—Å—Ç–≤–æ —É–Ω–µ—Å–ª–æ –†–∏–∫–∞—Ä–¥–æ, —Ä–∞—Å–ø–æ–ª–∞–≥–∞–ª–æ—Å—å –Ω–∞ –≤–µ—Ä—à–∏–Ω–µ —Å–∫–∞–ª—ã. –¶–µ–ª—ã–π –¥–µ–Ω—å –≤–∑–±–∏—Ä–∞–ª—Å—è –Ω–∞ –Ω–µ—ë, —Å—Ç–µ—Ä–µ–≤ —Ä—É–∫–∏ –≤ –∫—Ä–æ–≤—å. –û–¥–Ω–∞–∫–æ —Ç–æ, —á—Ç–æ —è —Ç–∞–º —É–≤–∏–¥–µ–ª, —É–∂–µ –Ω–µ –±—ã–ª–æ –º–æ–∏–º —Ç–æ–≤–∞—Ä–∏—â–µ–º...</b>'
				]
				let = random.choice(letters)
				new_txt = '–ü–æ—Ö–æ–∂–µ, –∑–¥–µ—Å—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –¥–ª—è –ø—Ä–∏–≤–∞–ª–∞, –Ω–æ –±—ã–ª–æ —ç—Ç–æ –æ—á–µ–Ω—å –¥–∞–≤–Ω–æ. –°—Ä–µ–¥–∏ –ø—É—Å—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥–∫–∏ ' + nam + ' –Ω–∞—à–ª–∞ –∫–ª–æ—á–æ–∫ –±—É–º–∞–≥–∏. –í–∏–¥–∏–º–æ, —ç—Ç–æ –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏:\n' + let
				if gender == 1:
					new_txt = '–ü–æ—Ö–æ–∂–µ, –∑–¥–µ—Å—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –¥–ª—è –ø—Ä–∏–≤–∞–ª–∞, –Ω–æ –±—ã–ª–æ —ç—Ç–æ –æ—á–µ–Ω—å –¥–∞–≤–Ω–æ. –°—Ä–µ–¥–∏ –ø—É—Å—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥–∫–∏ ' + nam + ' –Ω–∞—à–µ–ª –∫–ª–æ—á–æ–∫ –±—É–º–∞–≥–∏. –í–∏–¥–∏–º–æ, —ç—Ç–æ –æ—Ç—Ä—ã–≤–æ–∫ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ —ç–∫—Å–ø–µ–¥–∏—Ü–∏–∏:\n' + let
			elif d == 2:
				new_txt = '–ü–æ—Ö–æ–∂–µ, –∑–¥–µ—Å—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –¥–ª—è –ø—Ä–∏–≤–∞–ª–∞, –Ω–æ –±—ã–ª–æ —ç—Ç–æ –æ—á–µ–Ω—å –¥–∞–≤–Ω–æ. –°—Ä–µ–¥–∏ –ø—É—Å—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥–∫–∏ ' + nam + ' –Ω–∞—à–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä—ã–≤–∫–æ–≤ –±—É–º–∞–≥–∏. –°–æ–µ–¥–∏–Ω–∏–≤ –∏—Ö –≤–º–µ—Å—Ç–µ, –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞—Ä—Ç–∞ üó∫! –ö—Ä–µ—Å—Ç–∏–∫–æ–º, —Å—É–¥—è –ø–æ –≤—Å–µ–º—É, –æ—Ç–º–µ—á–µ–Ω—ã –æ–ø–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞'
				if gender == 1:
					new_txt = '–ü–æ—Ö–æ–∂–µ, –∑–¥–µ—Å—å —ç–∫—Å–ø–µ–¥–∏—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞—Å—å –¥–ª—è –ø—Ä–∏–≤–∞–ª–∞, –Ω–æ –±—ã–ª–æ —ç—Ç–æ –æ—á–µ–Ω—å –¥–∞–≤–Ω–æ. –°—Ä–µ–¥–∏ –ø—É—Å—Ç—ã—Ö –±—É—Ç—ã–ª–æ–∫ –≤–æ–¥–∫–∏ ' + nam + ' –Ω–∞—à–µ–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—Ä—ã–≤–∫–æ–≤ –±—É–º–∞–≥–∏. –°–æ–µ–¥–∏–Ω–∏–≤ –∏—Ö –≤–º–µ—Å—Ç–µ, –ø–æ–ª—É—á–∏–ª–∞—Å—å –∫–∞—Ä—Ç–∞ üó∫! –ö—Ä–µ—Å—Ç–∏–∫–æ–º, —Å—É–¥—è –ø–æ –≤—Å–µ–º—É, –æ—Ç–º–µ—á–µ–Ω—ã –æ–ø–∞—Å–Ω—ã–µ –º–µ—Å—Ç–∞'
				for i in range(0,13):
					for j in range(0,10):
						if generation[i][j] == 8:
							mas[i][j] = 6
		
		elif next_gen == 8:
			keyboard = types.InlineKeyboardMarkup(row_width=6)
			gen = random.randint(1,4)
			if gen == 1:
				enemies = [enemy_list[0].copy(),enemy_list[1].copy(),enemy_list[3].copy()]
			elif gen == 2:
				enemies = [enemy_list[0].copy(),enemy_list[4].copy(),enemy_list[0].copy()]
			elif gen == 3:
				enemies = [enemy_list[0].copy(),enemy_list[6].copy(),enemy_list[0].copy()]
			elif gen == 4:
				enemies = [enemy_list[0].copy(),enemy_list[8].copy(),enemy_list[0].copy()]

			new_txt = '–¢–∏—à–∏–Ω—É –æ–±–æ—Ä–≤–∞–ª –∑–≤—É–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —à–∞–≥–æ–≤. –ö—Ç–æ –±—ã —ç—Ç–æ –Ω–∏ –±—ã–ª, –∏–¥—ë—Ç –æ–Ω —è–≤–Ω–æ –Ω–µ —Å –¥–æ–±—Ä—ã–º–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏\n\n–ë–æ–π –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, —Å–æ–±–∏—Ä–∞–π —Å–∏–º–≤–æ–ª—ã –ø–æ 4 –≤ —Ä—è–¥ —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫—É\n\nüü• üüß - –±–ª–æ–∫\n\nüü° üü¢ - –∞—Ç–∞–∫–∞\n\nüíô - –ø–ª—é—Å –æ–¥–∏–Ω —Ö–æ–¥'
			if gender == 1:
				new_txt = '–¢–∏—à–∏–Ω—É –æ–±–æ—Ä–≤–∞–ª –∑–≤—É–∫ –±—ã—Å—Ç—Ä–æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è —à–∞–≥–æ–≤. –ö—Ç–æ –±—ã —ç—Ç–æ –Ω–∏ –±—ã–ª, –∏–¥—ë—Ç –æ–Ω —è–≤–Ω–æ –Ω–µ —Å –¥–æ–±—Ä—ã–º–∏ –Ω–∞–º–µ—Ä–µ–Ω–∏—è–º–∏\n\n–ë–æ–π –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, —Å–æ–±–∏—Ä–∞–π —Å–∏–º–≤–æ–ª—ã –ø–æ 4 –≤ —Ä—è–¥ —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ–∫–æ–º–∞–ª—å—á–∏–∫–∞\n\nüü• üüß - –±–ª–æ–∫\n\nüü° üü¢ - –∞—Ç–∞–∫–∞\n\nüíô - –ø–ª—é—Å –æ–¥–∏–Ω —Ö–æ–¥'
			bot.edit_message_media(media=telebot.types.InputMedia(media='AgACAgIAAx0CZQN7rQACwsFi8ct1qI3M_i1Bt1Tk_WvAbq7BWAACqcQxG-SBkUvkDVBnBMaohgEAAwIAA3MAAykE',caption=new_txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)
			
			field = generate_field(skills)
			blocks = 0
			turns = get_player_turns(skills, hp <= sum_enemies_hp(enemies), 2)
			targ = 1
			dat = f'pve {idk} {turns} {blocks} {targ}'
			target_keyboard(keyboard,targ,dat,1,1)
			field_keyboard(keyboard,dat,field,1,1,skills)
			txt = pve_text(enemies,nam,hp,maxhp,blocks,skills)
			txt +=  f"–û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤ –¥–æ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞:  {turns}"
			phot = enemy_photos[f"{enemies[0]['id']} {enemies[1]['id']} {enemies[2]['id']}"]
			struct['cur_x'] = next_x
			struct['cur_y'] = next_y
			struct['field'] = field
			struct['selected'] = -1
			struct['enemies'] = enemies
			struct['temp_skills'] = skills
			db[key] = pack(struct)
			time.sleep(15)
			bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=keyboard)
			return
		else:
			phot = 'AgACAgIAAx0CZQN7rQACsTdi5aOWZGH8r_RsZ4ZDXbGXHwZZxwACz8AxG2fEKUv9PoikvhKaVgEAAwIAA3MAAykE'
			new_txt = '–ú–∞—Å—à—Ç–∞–±—ã —ç—Ç–∏—Ö –ø–µ—â–µ—Ä –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∏–≤–ª—è—é—Ç, –∞ –∏—Ö –∫—Ä–∞—Å–æ—Ç–∞ –∑–∞–≤–æ—Ä–∞–∂–∏–≤–∞–µ—Ç. –ü–æ–∫–∞ —á—Ç–æ —Ç–∏—à–∏–Ω—É –ª–∏—à—å –∏–∑—Ä–µ–¥–∫–∞ –Ω–∞—Ä—É—à–∞–µ—Ç –ø–∞–¥–µ–Ω–∏–µ –∫–∞–ø–µ–ª—å –≤–æ–¥—ã'
		struct['co'] = co
		struct['wh'] = wh
		struct['mo'] = mo
		struct['he'] = he
		struct['cur_x'] = next_x
		struct['cur_y'] = next_y
		db[key] = pack(struct)
		txt = new_txt + f'\n\n–î–æ–±—ã—á–∞:   {co} üí∞   {wh} üç´   {mo} ‚ö°Ô∏è   {he} üçº\n\n'
		txt += map_text(mas)
		dungeon_keyboard(keyboard,idk)
		bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)

	elif cmd == "back":
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		time.sleep(1)
		data = cursor.execute(f'SELECT coins,inventory,base,gender FROM neko WHERE id = {idk}')
		data = data.fetchone()
		coins = data[0]
		inventory = unpack(data[1])
		baza = data[2]
		gender = data[3]
		struct = unpack(db[key])
		co = struct['co']
		wh = struct['wh']
		mo = struct['mo']
		he = struct['he']
		coins = coins + co
		inventory['whiskas'] += wh
		if wh != 0 and baza >= 7:
			inventory['whiskas'] += 1
		inventory['monster'] += mo
		inventory['antipohmelin'] += he
		if co != 0 or wh != 0 or mo != 0 or he != 0:
			cursor.execute(f"UPDATE neko SET dungeon_raids = dungeon_raids + 1 WHERE id = {idk}")
		cursor.execute(f"UPDATE neko SET coins = {coins},inventory = '{pack(inventory)}' WHERE id = {idk}")
		del db[key]
		txt = '–¢–≤–æ—è –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞ –≤–µ—Ä–Ω—É–ª–∞—Å—å –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø—Ä–∏–Ω–µ—Å–ª–∞ –≤—Å—ë, —á—Ç–æ –Ω–∞—à–ª–∞ –≤ —ç—Ç–æ–º –∑–∞–≥–∞–¥–æ—á–Ω–æ–º –º–∏—Ä–µ. –ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –Ω–∞–≥—Ä–∞–¥–∏—Ç—å –µ—ë –≤–∏—Å–∫–∞—Å–æ–º?'
		if gender == 1:
			txt = '–¢–≤–æ–π –Ω–µ–∫–æ–º–∞–ª—å—á–∏–∫ –≤–µ—Ä–Ω—É–ª—Å—è –æ–±—Ä–∞—Ç–Ω–æ –∏ –ø—Ä–∏–Ω—ë—Å –≤—Å—ë, —á—Ç–æ –Ω–∞—à—ë–ª –≤ —ç—Ç–æ–º –∑–∞–≥–∞–¥–æ—á–Ω–æ–º –º–∏—Ä–µ. –ú–æ–∂–µ—Ç —Å—Ç–æ–∏—Ç –Ω–∞–≥—Ä–∞–¥–∏—Ç—å –µ–≥–æ –≤–∏—Å–∫–∞—Å–æ–º?'
		bot.edit_message_media(media=telebot.types.InputMedia(media='AgACAgIAAx0CZQN7rQACwxZi8uNUoMtUGP6J96D7X-pveAGj3wAC374xGxy_mEsWdB1RBPi4nQEAAwIAA3MAAykE',caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)

	elif cmd == "get":
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		keyboard = types.InlineKeyboardMarkup(row_width=3)
		callback_button1 = types.InlineKeyboardButton(text = '–¢–û–ß–ù–û –ë–õ–Ø–¢–¨ –í–ó–Ø–¢–¨? ‚úÖ',callback_data = 'fuck ' + str(idk))
		keyboard.add(callback_button1)
		callback_button2 = types.InlineKeyboardButton(text = '–ù–µ –±—Ä–∞—Ç—å ‚ùå',callback_data = 'dont ' + str(idk))
		keyboard.add(callback_button2)
		bot.edit_message_media(media=telebot.types.InputMedia(media=call.message.photo[-1].file_id,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=keyboard)
		time.sleep(1)
	elif cmd == "delacc":
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		keyboard = types.InlineKeyboardMarkup(row_width=1)
		callback_button1 = types.InlineKeyboardButton(text = '‚úÖ –ü–û–î–£–ú–ê–ô –ï–©–Å –†–ê–ó',callback_data = 'fuckdel ' + str(idk))
		callback_button2 = types.InlineKeyboardButton(text = '‚ùå –î–∞ –Ω—É –Ω–∞—Ö—É–π',callback_data = 'dont ' + str(idk))
		keyboard.add(callback_button1)
		keyboard.add(callback_button2)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text='–ü–æ–¥—É–º–∞–π –µ—â—ë —Ä–∞–∑',reply_markup=keyboard)
		time.sleep(1)
	elif cmd == "fuckdel":
		answer_callback_query(bot,call,'–ù—É –∏ –ø–æ—à–µ–ª –Ω–∞—Ö—É–π')
		data = cursor.execute(f'SELECT name FROM neko WHERE id = {idk}')
		data = data.fetchone()
		nam = data[0]
		cursor.execute(f"DELETE FROM neko WHERE id = {idk}")
		add_to_dead(cursor,nam,'–í—ã–∫–∏–Ω—É–ª —Ö–æ–∑—è–∏–Ω (–ø–∏–¥–æ—Ä)')
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		time.sleep(1)

	elif cmd == "wear":
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		photka = call.message.photo[-1].file_id
		cursor.execute(f"UPDATE neko SET gifka = NULL,new_phot = '"+photka+"' WHERE id = "+ str(idk))
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		time.sleep(1)

	elif cmd == "fuck":
		data = cursor.execute(f'SELECT name,base,gender FROM neko WHERE id = '+str(idk))
		data = data.fetchone()
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		nam = data[0]
		baza = data[1]
		gender = data[2]
		if gender == 0:
			text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —ç—Ç–æ —Ç–≤–æ—è –Ω–æ–≤–∞—è –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞! –°—Ç–∞—Ä—É—é –º—ã —Å–∞–º–∏ –≤—ã–∫–∏–Ω–µ–º –≤ –±–ª–∏–∂–∞–π—à—É—é –∫–∞–Ω–∞–≤—É, —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–± —ç—Ç–æ–º –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è ‚ò†Ô∏è'
		else:
			text = '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —ç—Ç–æ —Ç–≤–æ–π –Ω–æ–≤—ã–π –Ω–µ–∫–æ–º–∞–ª—å—á–∏–∫! –°—Ç–∞—Ä–æ–≥–æ –º—ã —Å–∞–º–∏ –≤—ã–∫–∏–Ω–µ–º –≤ –±–ª–∏–∂–∞–π—à—É—é –∫–∞–Ω–∞–≤—É, —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –æ–± —ç—Ç–æ–º –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è ‚ò†Ô∏è'
		bot.send_message(call.message.chat.id,text)
		photka = call.message.photo[-1].file_id
		kill_neko(cursor,idk,gender,photka,nam,baza,call.message.chat.id,'–•–æ–∑—è–∏–Ω –Ω–∞—à–µ–ª –∑–∞–º–µ–Ω—É')
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		time.sleep(1)

	elif cmd == "dont":
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		time.sleep(1)

	elif cmd == "skill":
		turn = int(args[2])
		sk = int(args[3])
		data = cursor.execute(f'SELECT skill_one,skill_two FROM neko WHERE id = '+str(idk))
		data = data.fetchone()
		skill1 = data[0]
		skill2 = data[1]
		if turn == 1:
			cursor.execute(f"UPDATE neko SET skill_one = " + str(sk) + " WHERE id = "+ str(idk))
			skill1 = sk
		else:
			cursor.execute(f"UPDATE neko SET skill_two = " + str(sk) + " WHERE id = "+ str(idk))
			skill2 = sk
		if skill1 > 100:
			sktxt1 = active_skill_list[skill1-100]
		else:
			sktxt1 = passive_skill_list[skill1]
		if skill2 > 100:
			sktxt2 = active_skill_list[skill2-100]
		else:
			sktxt2 = passive_skill_list[skill2]

		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		time.sleep(1)
		txt = '–ù–∞–≤—ã–∫–∏ –∏–∑–º–µ–Ω–µ–Ω—ã:\n\n' + sktxt1 + '\n' + sktxt2
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = txt)

	elif cmd == "item":
		turn = int(args[2])
		itm = int(args[3])
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		if turn == 1:
			cursor.execute(f"UPDATE neko SET new_phot = NULL, item_one = " + str(itm) + " WHERE id = "+ str(idk))
		else:
			cursor.execute(f"UPDATE neko SET new_phot = NULL, item_two = " + str(itm) + " WHERE id = "+ str(idk))
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		time.sleep(1)
	elif cmd == "pplus":
		struct = unpack(db[key])
		minbet = struct['minbet']
		minbet += 1
		data = cursor.execute(f'SELECT coins FROM neko WHERE id = '+str(idk))
		data = data.fetchone()
		coins = data[0]
		if coins < minbet*5:
			answer_callback_query(bot,call,'–¢—ã –±–æ–º–∂')
			return
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		struct['minbet'] = minbet
		struct['bank'] = [minbet]
		struct['money'] = [coins]
		keyboard = poker_init_keyboard(key)
		time.sleep(1)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f'–í—Ö–æ–¥ –æ—Ç {5*minbet} üí∞',reply_markup=keyboard)
		db[key] = pack(struct)
	elif cmd == "pminus":
		struct = unpack(db[key])
		minbet = struct['minbet']
		minbet -= 1
		if minbet < 1:
			answer_callback_query(bot,call,'–•—É–π–Ω—è')
			return
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		struct['minbet'] = minbet
		struct['bank'] = [minbet]
		keyboard = poker_init_keyboard(key)
		time.sleep(1)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f'–í—Ö–æ–¥ –æ—Ç {5*minbet} üí∞',reply_markup=keyboard)
		db[key] = pack(struct)
	elif cmd == "pcontinue":
		struct = unpack(db[key])
		minbet = struct['minbet']
		players = struct['players']
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		keyboard = poker_join_keyboard(key)
		time.sleep(1)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f'–ò–¥—ë—Ç –Ω–∞–±–æ—Ä –≤ –ø–æ–∫–µ—Ä, –∫—Ç–æ –Ω–µ –æ—Ç–∑–æ–≤—ë—Ç—Å—è —Ç–æ—Ç –±—ã–¥–ª–æ\n\n–í—Ö–æ–¥ –æ—Ç {5*minbet} üí∞\n<b>–ò–≥—Ä–æ–∫–æ–≤: {len(players)}</b>',reply_markup=keyboard)
	elif cmd == "pend":
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		time.sleep(1)
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		del db[key]
	elif cmd == "pjoin":
		struct = unpack(db[key])
		minbet = struct['minbet']
		players = struct['players']
		bank = struct['bank']
		names = struct['names']
		money = struct['money']
		data = cursor.execute(f'SELECT coins, name FROM neko WHERE id = '+str(call.from_user.id))
		data = data.fetchone()
		coins = data[0]
		name = data[1]
		if coins < minbet*5:
			answer_callback_query(bot,call,'–¢—ã –±–æ–º–∂')
			return
		if check_all(bot, call.from_user.id) is not None :
			answer_callback_query(bot,call,check_all(bot, call.from_user.id))
			return
		if len(players) == 6:
			answer_callback_query(bot,call,'–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤')
			return
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		players.append(call.from_user.id)
		bank.append(minbet)
		names.append(name)
		money.append(coins)
		keyboard = poker_join_keyboard(key)
		time.sleep(1)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f'–ò–¥—ë—Ç –Ω–∞–±–æ—Ä –≤ –ø–æ–∫–µ—Ä, –∫—Ç–æ –Ω–µ –æ—Ç–∑–æ–≤—ë—Ç—Å—è —Ç–æ—Ç –±—ã–¥–ª–æ\n\n–í—Ö–æ–¥ –æ—Ç {5*minbet} üí∞\n<b>–ò–≥—Ä–æ–∫–æ–≤: {len(players)}</b>',reply_markup=keyboard)
		db[key] = pack(struct)
	elif cmd == "pstart":
		struct = unpack(db[key])
		minbet = struct['minbet']
		players = struct['players']
		bank = struct['bank']
		names = struct['names']
		money = struct['money']
		cards = struct['cards']
		hand = struct['hand']
		if len(players) < 2:
			answer_callback_query(bot,call,'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤')
			return
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		deck = [
		(2,1),(3,1),(4,1),(5,1),(6,1),(7,1),(8,1),(9,1),(10,1),(11,1),(12,1),(13,1),(14,1),
		(2,2),(3,2),(4,2),(5,2),(6,2),(7,2),(8,2),(9,2),(10,2),(11,2),(12,2),(13,2),(14,2),
		(2,3),(3,3),(4,3),(5,3),(6,3),(7,3),(8,3),(9,3),(10,3),(11,3),(12,3),(13,3),(14,3),
		(2,4),(3,4),(4,4),(5,4),(6,4),(7,4),(8,4),(9,4),(10,4),(11,4),(12,4),(13,4),(14,4)
		]
		for i in range(5):
			d = random.choice(deck)
			deck.remove(d)
			cards.append(d)
		for j in range(len(players)):
			for i in range(2):
				d = random.choice(deck)
				deck.remove(d)
				hand.append(d)
		turn = players[0]
		pos = 0
		r = 1
		txt = poker_text(players,names,bank,turn,pos,money)
		keyboard = poker_keyboard(True,1,key,turn,pos,money,bank,False,players,base_bet = minbet)
		time.sleep(1)
		f = 'AgACAgIAAx0CZQN7rQABAjYqZSgLBGe5IXK5GmfOVwbxuvUxsTwAAgvNMRsUZEBJHzsUg8_DUQABAQADAgADeQADMAQ'
		m = bot.send_photo(call.message.chat.id, photo=f,caption = txt,reply_markup=keyboard)
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		struct['wait'] = int(time.time() + 420)
		struct['event'] = 2
		struct['message'] = m.id
		db[key] = pack(struct)
	elif cmd == "poker":
		struct = unpack(db[key])
		cards = struct['cards']
		event = struct['event']
		hand = struct['hand']
		players = struct['players']
		bank = struct['bank']
		names = struct['names']
		money = struct['money']
		dead = struct['dead']
		vabank = struct['vabank']
		minbet = struct['minbet']
		turn = int(args[2])
		pos = int(args[3])
		action = int(args[4])
		r = int(args[5])
		if call.from_user.id != turn:
			answer_callback_query(bot,call,'–ù–µ —Ç–≤–æ–π —Ö–æ–¥')
			return
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		if action == 1:
			act_txt = names[pos] + ' cc—ã—Ç –∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥\n\n'
		elif action == 2:
			act_txt = names[pos] + ' –ª–∏–≤–∞–µ—Ç –∏–∑ –∏–≥—Ä—ã –æ–±–æ—Å—Å–∞–≤—à–∏—Å—å –∏ –æ–±–æ—Å—Ä–∞–≤—à–∏—Å—å\n\n'
			names[pos] = '‚ò†Ô∏è‚ò†Ô∏è‚ò†Ô∏è'
			dead.append(turn)
		else:
			if action == 3:
				act_txt = names[pos] + ' –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É\n\n'
			elif action == 4:
				act_txt = names[pos] + ' –ø–æ–≤—ã—à–∞–µ—Ç —Å—Ç–∞–≤–∫—É\n\n'
			bet = int(args[6])
			bank[pos] += bet
			if bank[pos] >= money[pos]:
				vabank.append(turn)
				act_txt = names[pos] + ' —Å—Ç–∞–≤–∏—Ç –¥—É—à—É —Å–≤–æ–µ–π –º–∞—Ç–µ—Ä–∏\n\n'
				names[pos] = f'<i>{names[pos]}</i>'
		#—É—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
		bal_bank = bank.copy()
		for i in range(len(players)):
			if players[i] in dead or players[i] in vabank:
				bal_bank[i] = max(bank)
		balance = max(bal_bank) == min(bal_bank)
		islastbet = (len(dead)+len(vabank)) >= len(players) - 1
		#—Å–º–µ–Ω–∞ —Ö–æ–¥—è—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
		if r == 1:
			pos += 1
			while pos != len(players) and (players[pos] in dead or players[pos] in vabank):
				pos = pos + 1
		#–Ω–æ–≤–∞—è —Å—Ç–∞–¥–∏—è –∏–ª–∏ –∫–æ–Ω–µ—Ü
		if (r == 1 and pos == len(players) and balance) or (r == 2 and balance) or (islastbet and balance):
			if islastbet:
				event = 5
			r = 1
			pos = 0
			while pos != len(players) and (players[pos] in dead or players[pos] in vabank):
				pos += 1
			f = poker_image(cards,event)
			event += 1
			if event == 6:
				#–ü–†–û–°–ß–ï–¢ –ö–û–ú–ë–ò–ù–ê–¶–ò–ô
				combinations = ['–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞','–ü–∞—Ä–∞','–î–≤–µ –ø–∞—Ä—ã','–°–µ—Ç','–°—Ç—Ä–∏—Ç','–§–ª–µ—à','–§—É–ª–ª —Ö–∞—É—Å','–ö–∞—Ä–µ','–°—Ç—Ä–∏—Ç —Ñ–ª–µ—à','–§–ª–µ—à —Ä–æ—è–ª—å']
				player_combs = []
				for j in range(len(players)):
					crd = cards.copy()
					crd.append(hand[j*2])
					crd.append(hand[j*2+1])
					player_combs.append(combinator(crd))
				#–ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê
				txt = act_txt
				for i in range(len(players)):
					hd = [hand[i*2],hand[i*2+1]]
					txt = txt + names[i] + '  ' + str(bank[i]) + ' üí∞\n'
					txt += card_text(hd)
					txt += str(combinations[round(player_combs[i])]) + '\n\n'
				#–í–´–ë–û–† –ü–û–ë–ï–î–ò–¢–ï–õ–Ø
				for i in range(len(players)):
					if players[i] in dead:
						player_combs[i] = -1
				max_comb = max(player_combs)
				if player_combs.count(max_comb) == 1:
					winners = [player_combs.index(max_comb)]
				else:
					for i in range(len(players)):
							if math.isclose(player_combs[i],max_comb):
								player_combs[i] = max(hand[i*2][0],hand[i*2+1][0])
							else:
								player_combs[i] = -1
					max_comb = max(player_combs)
					winners = []
					for i in range(len(players)):
						if math.isclose(player_combs[i],max_comb):
							winners.append(i)
				#–ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê
				if len(winners) == 1:
					txt += '–ü–æ–±–µ–¥–∏—Ç–µ–ª—å <a href="tg://user?id='+str(players[winners[0]])+'">'+str(names[winners[0]])+'</a>, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—É—Ç –±–∏–±—É'
				else:
					txt += '–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ '
					for j in winners:
						txt += '<a href="tg://user?id='+str(players[j])+'">'+str(names[j])+'</a>, '
					txt += '–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—É—Ç –±–∏–±—É'
				#–†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–ï–ù–ï–ì
				max_cash = []
				for j in winners:
					max_cash.append(bank[j])
				max_cash = max(max_cash)
				cash = 0
				for i in range(len(players)):
					if i in winners:
						continue
					if bank[i] > max_cash:
						cash += max_cash
						cursor.execute(f"UPDATE neko SET coins = coins - " + str(max_cash) + " WHERE id = " + str(players[i]))
					else:
						cash += bank[i]
						cursor.execute(f"UPDATE neko SET coins = coins - " + str(bank[i]) + " WHERE id = " + str(players[i]))
				cash = round(cash/len(winners))
				for j in winners:
					cursor.execute(f"UPDATE neko SET coins = coins + " + str(cash) + " WHERE id = " + str(players[j]))
				time.sleep(1)
				bot.edit_message_media(media=telebot.types.InputMedia(media=f,caption = txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)
				del db[key]
				return
			struct['event'] = event
			turn = players[pos]
			txt = act_txt + poker_text(players,names,bank,turn,pos,money)
			keyboard = poker_keyboard(True,1,key,turn,pos,money,bank,False,players,base_bet = minbet)
			time.sleep(1)
			bot.edit_message_media(media=telebot.types.InputMedia(media=f,caption = txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=keyboard)
			db[key] = pack(struct)
		else:
			if (r == 1 and pos == len(players)) or r == 2:
				r = 2
				pos = bal_bank.index(min(bal_bank))
			turn = players[pos]
			txt = act_txt + poker_text(players,names,bank,turn,pos,money)
			keyboard = poker_keyboard(balance,r,key,turn,pos,money,bank,islastbet,players,base_bet = minbet)
			time.sleep(1)
			bot.edit_message_media(media=telebot.types.InputMedia(media=call.message.photo[-1].file_id,caption = txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=keyboard)
			db[key] = pack(struct)
	elif cmd == "hand":
		turn = int(args[2])
		pos = int(args[3])
		if call.from_user.id != turn:
			answer_callback_query(bot,call,'–ù–µ —Ç–≤–æ–π —Ö–æ–¥')
			return
		struct = unpack(db[key])
		cards = struct['cards']
		hand = struct['hand']
		event = struct['event']
		hand = [hand[pos*2],hand[pos*2+1]]
		cards = cards.copy()
		if event == 2:
			event = 0
		for i in range(5-event):
			cards.pop()
		combinations = ['–°—Ç–∞—Ä—à–∞—è –∫–∞—Ä—Ç–∞','–ü–∞—Ä–∞','–î–≤–µ –ø–∞—Ä—ã','–°–µ—Ç','–°—Ç—Ä–∏—Ç','–§–ª–µ—à','–§—É–ª–ª —Ö–∞—É—Å','–ö–∞—Ä–µ','–°—Ç—Ä–∏—Ç —Ñ–ª–µ—à','–§–ª–µ—à —Ä–æ—è–ª—å']
		txt = all_cards_text(cards)
		txt += '–ö–∞—Ä—Ç—ã —É —Ç–µ–±—è –≤ —Ä—É–∫–µ:\n'
		txt += card_text(hand)
		txt += '\n–¢–µ–∫—É—â–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è:\n'
		cards.append(hand[0])
		cards.append(hand[1])
		comb = combinator(cards)
		txt += combinations[round(comb)]
		answer_callback_query(bot,call,txt,True)
	elif cmd == "bend":
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		del db[key]
	elif cmd == "bjoin":
		data = cursor.execute(f'SELECT rep,car,inventory,boss_kd FROM neko WHERE id = '+str(call.from_user.id))
		data = data.fetchone()
		rep = data[0]
		car = data[1]
		inventory = unpack(data[2])
		boss_kd = int(data[3] - time.time())
		if not car:
			answer_callback_query(bot,call,'–ù—É–∂–µ–Ω –Ω–µ–∫–æ–º–æ–±–∏–ª—å')
			return
		if inventory['monster'] < 1:
			answer_callback_query(bot,call,'–ù–µ—Ç—É –º–æ–Ω—Å—Ç—Ä–æ–≤')
			return
		if boss_kd > 0:
			answer_callback_query(bot,call,'–î–∞–π –Ω–µ–∫–æ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å')
			return
		if rep < 120:
			answer_callback_query(bot,call,'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–æ–≤–µ—Ä–∏—è')
			return
		if check_all(bot, call.from_user.id) is not None :
			answer_callback_query(bot,call,check_all(bot, call.from_user.id))
			return
		struct = unpack(db[key])
		players = struct['players']
		if len(players) == 3:
			answer_callback_query(bot,call,'–ú–∞–∫—Å–∏–º—É–º –∏–≥—Ä–æ–∫–æ–≤')
			return
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		players.append(call.from_user.id)
		db[key] = pack(struct)
		keyboard = types.InlineKeyboardMarkup(row_width=2)
		callback_button1 = types.InlineKeyboardButton(text = '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ‚ûï',callback_data = 'bjoin ' + str(idk))
		callback_button2 = types.InlineKeyboardButton(text = '–°—Ç–∞—Ä—Ç ‚úÖ',callback_data = 'bstart ' + str(idk))
		callback_button3 = types.InlineKeyboardButton(text = '–û—Ç–º–µ–Ω–∞ ‚ùå',callback_data = 'bend ' + str(idk))
		keyboard.add(callback_button1)
		keyboard.add(callback_button2,callback_button3)
		time.sleep(1)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,text = f'–ò–¥—ë—Ç –Ω–∞–±–æ—Ä –≤ —Ç–∏–º—É –¥–ª—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–π –ø–∏–∑–¥–µ–ª–∫–∏ —Å –±–æ—Å—Å–æ–º\n\n–í—Ö–æ–¥ 1 ‚ö°Ô∏è, 120 üíû\n<b>–ò–≥—Ä–æ–∫–æ–≤: {len(players)}</b>',reply_markup=keyboard)
	elif cmd == "bstart":
		struct = unpack(db[key])
		players = struct['players']
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		all_hp = []
		all_field = []
		all_name = []
		all_skills = []
		for player in players:
			data = cursor.execute(f'SELECT inventory, equipped, skill_one, skill_two, name, base, happy FROM neko WHERE id = '+str(player))
			data = data.fetchone()
			if data is not None:
				inventory = unpack(data[0])
				equipped = data[1]
				skill1 = data[2]
				skill2 = data[3]
				name = data[4]
				baza = data[5]
				happy = int(time.time() - data[6])
				all_hp.append(get_hp(equipped))
				all_field.append(generate_field([skill1,skill2]))
				all_name.append(name)
				all_skills.append([skill1,skill2])
				equipped = minus_durability(equipped)
				inventory['monster'] -= 1
				boss_kd = int(time.time() + BOSS_TIMEOUT + HAPPY_TIMEOUT[get_happiness_level(happy,baza)])
				cursor.execute(f"UPDATE neko SET equipped = {equipped}, inventory = '{pack(inventory)}', boss_kd = {boss_kd} WHERE id = {player}")
		hps = [4,7,8]
		second = [0,0,13]
		n = len(players)-1
		boss_enemy = enemy_list[10].copy()
		boss_enemy['maxhp'] = hps[n]
		boss_enemy['hp'] = boss_enemy['maxhp']
		enemies = [enemy_list[13].copy(),boss_enemy,enemy_list[second[n]].copy()]
		keyboard = types.InlineKeyboardMarkup(row_width=2)
		zakup_buy_keyboard(keyboard,idk)
		txt = '–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤—Ö–æ–¥ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –µ–±–µ–Ω—è—Ö –≤–¥–∞–ª–∏ –æ—Ç —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏, —Ä—è–¥–æ–º —Å–æ –≤—Ö–æ–¥–æ–º –≤—ã —É–≤–∏–¥–µ–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π –ª–∞—Ä—ë–∫\n\n–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å (–≤—Å—ë –ø–æ 10 üí∞):\n\n<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Ä–∞—Å—Ç–∏—à–∫–∞ üßÉ</b>\n–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Å—Ç–∏ –≤ —Ñ–∏–≥—É—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞\n\n<b>–õ–µ—á–µ–±–Ω–∞—è –ø–∏—Ç—Å–∞ üçï</b>\n–ò–∑–ª–µ—á–∏–≤–∞–µ—Ç –æ—Ç —è–¥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 1 —Ö–ø\n\n–ü–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ'
		ph = 'AgACAgQAAx0CZQN7rQABAtnbZXYk4pKnBrEkF7e3EjSTSxHp9foAAviuMRvh4lVQbYm8gqzvDf0BAAMCAAN4AAMzBA'
		time.sleep(1)
		m = bot.send_photo(chat_id=call.message.chat.id, photo=ph,caption = txt,reply_markup=keyboard)
		bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
		struct['all_hp'] = all_hp
		struct['all_maxhp'] = all_hp
		struct['enemies'] = enemies
		struct['all_field'] = all_field
		struct['all_name'] = all_name
		struct['all_skills'] = all_skills
		struct['event'] = 1
		struct['wait'] = int(time.time() + 600)
		struct['message'] = m.id
		db[key] = pack(struct)
	elif cmd == "bcontinue":
		struct = unpack(db[key])
		players = struct['players']
		zakup = struct['zakup']
		all_hp = struct['all_hp']
		all_maxhp = struct['all_maxhp']
		enemies = struct['enemies']
		all_poisoned = struct['all_poisoned']
		all_blocks = struct['all_blocks']
		all_field = struct['all_field']
		all_name = struct['all_name']
		all_skills = struct['all_skills']
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		time.sleep(1)
		txt = '–í–Ω—É—Ç—Ä–∏ –Ω–µ –±—ã–ª–æ –Ω–∏ –¥—É—à–∏. –ù–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–æ–±—Ä–æ–¥–∏–≤ –ø–æ –ø—É—Å—Ç—ã–º –∫–æ—Ä–∏–¥–æ—Ä–∞–º, –≤—ã —É–≤–∏–¥–µ–ª–∏ —Å–∏–ª—É—ç—Ç, –º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–π—Å—è –∫ –≤–∞–º\n\n–ë–æ–π –Ω–∞—á–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥, —Å–æ–±–∏—Ä–∞–π —Å–∏–º–≤–æ–ª—ã –ø–æ 4 –≤ —Ä—è–¥ —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–µ–∫–æ—á–∞–Ω–∞\n\nüü• üüß - –±–ª–æ–∫\n\nüü° üü¢ - –∞—Ç–∞–∫–∞\n\nüíô - –ø–ª—é—Å –æ–¥–∏–Ω —Ö–æ–¥'
		ph = 'AgACAgIAAx0CZQN7rQABAdk2ZQABZ1Oxc7bJUQwI0_AR_Fwa1Ak_AAKWyzEb5toBSEn9Jkb9RNRMAQADAgADcwADMAQ'
		bot.edit_message_media(media=telebot.types.InputMedia(media=ph,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id.id)
		pindex = 0
		player = players[pindex]
		keyboard = types.InlineKeyboardMarkup(row_width=6)
		turns = get_player_turns(all_skills[pindex], all_hp[pindex] <= sum_enemies_hp(enemies), 2)
		targ = 1
		item_use = 1
		dat = f'boss {idk} {player} {pindex} {turns} {targ} {item_use}'
		target_keyboard(keyboard,targ,dat,1,1)
		field_keyboard(keyboard,dat,all_field[pindex],1,1,all_skills[pindex])
		zakup_use_keyboard(keyboard,zakup,dat,1,1,item_use)
		txt = boss_text(enemies,all_name[pindex],all_poisoned[pindex],all_hp[pindex],all_maxhp[pindex],all_blocks[pindex],all_skills[pindex],player)
		txt += f'–û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤ –¥–æ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞:  {turns}'
		phot = boss_photos[f"{enemies[0]['id']} {enemies[1]['id']} {enemies[2]['id']}"]
		struct['wait'] = int(time.time() + 1800)
		struct['event'] = 2  
		db[key] = pack(struct)
		time.sleep(15)
		bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=keyboard)
	elif cmd == "boss":
		player = int(args[2])
		pindex = int(args[3])
		turns = int(args[4])
		targ = int(args[5])
		item_use = int(args[6])
		pos = int(args[7])
		rer1 = int(args[8])
		rer2 = int(args[9])
		if call.from_user.id != player:
			answer_callback_query(bot,call,'–ü–∞—à–æ–ª –Ω–∞—Ö—É–π')
			return
		atack = 0
		ability = 0
		splash = False
		struct = unpack(db[key])
		players = struct['players']
		zakup = struct['zakup']
		all_hp = struct['all_hp']
		all_maxhp = struct['all_maxhp']
		enemies = struct['enemies']
		all_poisoned = struct['all_poisoned']
		all_blocks = struct['all_blocks']
		all_field = struct['all_field']
		selected = struct['selected']
		all_name = struct['all_name']
		all_skills = struct['all_skills']
		if pos < 0:
			ability = abs(pos)
			if ability >= 300:
				item = ability - 300
				if item == 0:
					#—Ä–∞—Å—Ç–∏—à–∫–∞
					if selected == -1:
						answer_callback_query(bot,call,'–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ñ–∏–≥—É—Ä—É')
						return
					figa = all_field[pindex][selected]
					if figa == 5 or figa == 6:
						answer_callback_query(bot,call,'–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è —Ñ–∏–≥—É—Ä–∞')
						return
					if all_field[pindex].count(6) == 0:
						answer_callback_query(bot,call,'–ù–µ—Ç –∫–æ—Å—Ç–µ–π')
						return
					for i in range(36):
						if all_field[pindex][i] == 6:
							all_field[pindex][i] = figa
				elif item == 1:
					#–ø–∏—Ç—Å–∞  
					all_poisoned[pindex] = False
					all_hp[pindex] += 1
				elif item == 2:
					#–∫–æ—Ä—Å–∞—Ä
					atack += 1
					splash = True
				answer_callback_query(bot,call,'–ü—Ä–µ–¥–º–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω')
				zakup.remove(item)
				item_use = 0
			elif ability >= 200:
				result = change_target(bot,ability,targ,call,enemies)
				if result == -1:
					return
				targ = result
			else:
				result = use_skill(bot,ability,selected,call,all_field[pindex]) 
				if result[0] == -1:
					return
				selected = -1
				atack += result[1]
				all_blocks[pindex] += result[2]
				turns += result[3]
		else:
			result = change_figures(bot,selected,pos,call,all_field[pindex])
			if result[0] == -1:
				selected = result[1]
			else:
				turns -= 1
				selected = -1
		result = field_calculate(all_field[pindex],all_skills[pindex],True)
		atack += result[0]
		all_blocks[pindex] += result[1]
		turns += result[2]
		all_hp[pindex] += result[3]
		if all_hp[pindex] > all_maxhp[pindex]:
			all_hp[pindex] = all_maxhp[pindex]
		if all_blocks[pindex] > 3:
			all_blocks[pindex] = 3
			
		atack = get_player_damage(all_skills[pindex],all_hp[pindex],all_maxhp[pindex],atack,turns,all_blocks[pindex])
		turns = player_atack(enemies,targ,turns,atack,splash)

		if turns <= 0:
			rer1 = 1
			rer2 = 1
			item_use = 1
			pindex = boss_choose_player(pindex, all_hp)
			if pindex == -1:
				#–ê–¢–ê–ö–ê –Ø–î–ê
				for i in range(len(players)):
					if all_poisoned[i]:
						all_hp[i], all_blocks[i] = use_player_defence(all_skills[i],1,all_blocks[i],all_hp[i],True) 
				#–û–ë–©–ê–Ø –ê–¢–ê–ö–ê –í–†–ê–ì–û–í
				for i in range(3):
						atk = enemies_turn(enemies,i)
						for j in range(len(players)):
							all_hp[j], all_blocks[j] = use_player_defence(all_skills[j],atk,all_blocks[j],all_hp[j],False) 
				#–ê–¢–ê–ö–ê –°–û–°–ê–ù–°–ê
				for i in range(3):
					if enemies[i]['id'] == 10 or enemies[i]['id'] == 11:
							for j in range(len(players)):
								prevhp = all_hp[j]
								all_hp[j], all_blocks[j] = use_player_defence(all_skills[j],2,all_blocks[j],all_hp[j],False) 
								if prevhp != all_hp[j]:
									do = random.randint(1,2)
									if do == 1 or all_poisoned[j]:
										bone_atack(all_field[j],5)
									elif do == 2:
										all_poisoned[j] = True

						
				if not check_alive(all_hp):
					txt = boss_hp_bar(all_name,all_hp,all_maxhp)
					phot = boss_photos[f"{enemies[0]['id']} {enemies[1]['id']} {enemies[2]['id']}"]
					txt += '\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –≤ –∑–∞—Ä—É–±–µ –Ω–µ–∫–æ—á–∞–Ω—ã –±—ã–ª–∏ –æ—Ç–ø–∏–∑–∂–µ–Ω—ã –∏ –µ—â—ë –¥–æ–ª–≥–æ –æ—Ç–º—ã–≤–∞–ª–∏—Å—å –æ—Ç –ø–∏–ª–∫–∞'
					time.sleep(1)
					bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)
					del db[key]
					return    
				pindex = boss_choose_player(pindex, all_hp)
				
			turns = get_player_turns(all_skills[pindex], all_hp[pindex] <= sum_enemies_hp(enemies), 2)
		
		if sum_enemies_hp(enemies) <= 0:
			n = len(players) - 1
			coins_reward = [150,75,50]
			bones_reward = [8,4,3]
			boxes_reward = [2,1,1]
			txt = boss_hp_bar(all_name,all_hp,all_maxhp)
			phot = boss_photos[f"{enemies[0]['id']} {enemies[1]['id']} {enemies[2]['id']}"]
			txt += '\n\n–ù–µ–∫–æ—á–∞–Ω—ã –æ–¥–µ—Ä–∂–∞–ª–∏ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—É—é –ø–æ–±–µ–¥—É, –∏ —É—Å–ª–æ–≤–∏—è —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –æ–±—Ä–∞–∑—Ü–∞ ‚Ññ228 –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±–µ—â–∞–Ω–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É –æ—Ç –ù–µ–∫–æ—Å–ª–∞–≤–∏–∏'
			time.sleep(1)
			bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)
			txt = f"–í—ã —Ä–µ—à–∏–ª–∏ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –¥–æ–±—ã—á—É, –ø–æ—ç—Ç–æ–º—É –∫–∞–∂–¥—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —ç–ø–∏—á–µ—Å–∫–æ–π –∑–∞—Ä—É–±—ã –ø–æ–ª—É—á–∞–µ—Ç:\n\nüí∞ –ù–µ–∫–æ–≥—Ä–∏–≤–Ω—ã √ó {coins_reward}\nü¶¥ –ö–æ—Å—Ç—å —Å–∞–Ω—Å–∞ √ó {bones_reward}\nüéÅ –ö–æ—Ä–æ–±–∫–∞ —Å —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏ √ó {boxes_reward}"
			time.sleep(1)
			bot.send_message(call.message.chat.id, txt)
			for player in players:
				data = cursor.execute(f'SELECT inventory, coins, boss_raids FROM neko WHERE id = '+str(player))
				data = data.fetchone()
				if data is not None:
					inventory = unpack(data[0])
					coins = data[1]
					boss_raids = data[2]
					inventory['bone'] += bones_reward[n]
					inventory['loot_box'] += boxes_reward[n]
					coins += coins_reward[n]
					boss_raids += 1
					cursor.execute(f"UPDATE neko SET inventory = '{pack(inventory)}', coins = {coins}, boss_raids = {boss_raids} WHERE id = {player}")
			del db[key]
			return
			
		targ = change_zero_target(targ,enemies)
		keyboard = types.InlineKeyboardMarkup(row_width=6)
		player = players[pindex]
		dat = f'boss {idk} {player} {pindex} {turns} {targ} {item_use}'
		target_keyboard(keyboard,targ,dat,rer1,rer2)
		field_keyboard(keyboard,dat,all_field[pindex],rer1,rer2,all_skills[pindex],selected)
		zakup_use_keyboard(keyboard,zakup,dat,rer1,rer2,item_use)
		txt = boss_text(enemies,all_name[pindex],all_poisoned[pindex],all_hp[pindex],all_maxhp[pindex],all_blocks[pindex],all_skills[pindex],player)
		txt += f'–û—Å—Ç–∞–ª–æ—Å—å —Ö–æ–¥–æ–≤ –¥–æ –∞—Ç–∞–∫–∏ –≤—Ä–∞–≥–∞:  {turns}'
		phot = boss_photos[f"{enemies[0]['id']} {enemies[1]['id']} {enemies[2]['id']}"] 
		struct['selected'] = selected
		db[key] = pack(struct)
		time.sleep(1)
		bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=keyboard)   
	elif cmd == "buy":
		item = int(args[2])
		struct = unpack(db[key])
		zakup = struct['zakup']
		players = struct['players']
		if call.from_user.id not in players:
			answer_callback_query(bot,call,'–ü–∞—à–æ–ª –Ω–∞—Ö—É–π')
			return
		if len(zakup) >= 3:
			answer_callback_query(bot,call,'–ú–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥–º–µ—Ç–æ–≤')
			return
		data = cursor.execute(f'SELECT coins FROM neko WHERE id = {call.from_user.id}')
		data = data.fetchone()
		coins = data[0]
		if coins < 10:
			answer_callback_query(bot,call,'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥')
			return
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		zakup.append(item)
		emojes = ['üßÉ ','üçï ','üß® ']
		emoji_text = ''
		for itm in zakup:
			emoji_text += emojes[itm]
		keyboard = types.InlineKeyboardMarkup(row_width=2)
		zakup_buy_keyboard(keyboard,idk)
		txt = '–ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ —Ç–æ, —á—Ç–æ –≤—Ö–æ–¥ –≤ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –µ–±–µ–Ω—è—Ö –≤–¥–∞–ª–∏ –æ—Ç —Ü–∏–≤–∏–ª–∏–∑–∞—Ü–∏–∏, —Ä—è–¥–æ–º —Å–æ –≤—Ö–æ–¥–æ–º –≤—ã —É–≤–∏–¥–µ–ª–∏ –Ω–µ–±–æ–ª—å—à–æ–π –ª–∞—Ä—ë–∫\n\n–ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å (–≤—Å—ë –ø–æ 10 üí∞):\n\n<b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–∞—è —Ä–∞—Å—Ç–∏—à–∫–∞ üßÉ</b>\n–ü—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Å—Ç–∏ –≤ —Ñ–∏–≥—É—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞\n\n<b>–õ–µ—á–µ–±–Ω–∞—è –ø–∏—Ç—Å–∞ üçï</b>\n–ò–∑–ª–µ—á–∏–≤–∞–µ—Ç –æ—Ç —è–¥–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 1 —Ö–ø\n\n–ö—É–ø–ª–µ–Ω–æ:  ' + emoji_text
		cursor.execute(f"UPDATE neko SET coins = coins - 10 WHERE id = {call.from_user.id}")
		db[key] = pack(struct)
		time.sleep(1)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text = txt, reply_markup=keyboard)
		
	elif cmd == "read":
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		bot.edit_message_media(media=telebot.types.InputMedia(media=patch_image,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)

	elif cmd == "paper":
		b1 = eval(args[2])
		b2 = eval(args[3])
		reason = int(args[4])
		starter = int(args[5])
		struct = unpack(db[key])
		images = struct['images']
		stage = struct['stage']
		mistakes = struct['mistakes']
		if starter == 1:
			answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		else:
			if b1 == b2:
				answer_callback_query(bot,call,'–ü—Ä–∞–≤–∏–ª—å–Ω–æ üëç')
			else:
				reasons = ['–ù—É–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å','–ù–µ–≤–µ—Ä–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è','–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è','–ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏','–õ–∏—Ü–µ–Ω–∑–∏—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞','–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–µ—á–∞—Ç—å—é']
				answer_callback_query(bot,call,f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üëé\n{reasons[reason]}',True)
				mistakes += 1
			stage += 1
		if stage == 3:
			data = cursor.execute(f'SELECT coins,version FROM neko WHERE id = '+str(idk))
			data = data.fetchone()
			coins = data[0]
			version = data[1]
			phot = 'AgACAgIAAx0CZQN7rQAC3fFj7PN2eIWEEvqIJy3vH2FBpAUl1AACKsUxG7OiaUu7MhScqwbHIAEAAwIAA3MAAy4E'
			c = 20 - 5*mistakes
			coins += c
			cursor.execute(f"UPDATE neko SET coins = "+ str(coins) +" WHERE id = "+str(idk))
			del db[key]
			time.sleep(1)
			if mistakes == 0:
				txt = '–ó–∞ —ç—Ç—É —Å–º–µ–Ω—É —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å ' + str(c) + ' –Ω–µ–∫–æ–≥—Ä–∏–≤–µ–Ω üí∞. –¢—ã –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª –Ω–∏ –µ–¥–∏–Ω–æ–π –æ—à–∏–±–∫–∏, —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∑–∞–≤–æ–¥–∞ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π!'
			else:
				txt = '–ó–∞ —ç—Ç—É —Å–º–µ–Ω—É —Ç–µ–±–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å ' + str(c) + ' –Ω–µ–∫–æ–≥—Ä–∏–≤–µ–Ω üí∞. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–≥–æ–¥–Ω—è —Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞ –Ω–µ –±—ã–ª–∞ –∏–¥–µ–∞–ª—å–Ω–æ–π, –∏ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∑–∞–≤–æ–¥–∞ –∑–∞–ø–æ–º–Ω–∏—Ç —ç—Ç–æ'
			#elif mistakes == 3:
			#    txt = '–ó–∞ —ç—Ç—É —Å–º–µ–Ω—É —Ç–µ–±–µ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å. –ü–∞—Ä—Ç–∏—è –≤—Å—ë —á–∞—â–µ –ø–æ–¥—É–º—ã–≤–∞–µ—Ç –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –Ω–µ–¥–æ—Å—Ç–æ–∏–Ω —Å–≤–æ–µ–π –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∏'
			#r = random.randint(1,10)
			r = 1
			if r == 10:
				biba = random.randint(10800,21600)
				b = int(time.time() + biba)
				biba = math.ceil(biba/3600)
				cursor.execute(f'UPDATE neko SET bolnitsa  = '+str(b)+' WHERE id = ' + str(idk))
				txt += '\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ–ø—Ä–æ—à–µ–¥—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–∫–æ—á–∞–Ω—ã —Å–≥–æ–≤–æ—Ä–∏–ª–∏—Å—å –∏ –æ—Ç–ø–∏–∑–¥–∏–ª–∏ —Ç–µ–±—è –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã, –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É ' + str(biba) + ' —á–∞—Å–æ–≤ —Ç—ã –ø—Ä–æ–≤–µ–¥—ë—à—å –≤ –±–æ–ª—å–Ω–∏—Ü–µ üíä'
			bot.edit_message_media(media=telebot.types.InputMedia(media=phot,caption=txt,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id)
			if version != patch_version:
				cursor.execute(f"UPDATE neko SET version = "+ str(patch_version) +" WHERE id = "+str(idk))
				keyboard = types.InlineKeyboardMarkup()
				callback_button1 = types.InlineKeyboardButton(text = '–ß–∏—Ç–∞—Ç—å üëÄ',callback_data = 'read ' + str(idk))
				keyboard.add(callback_button1)
				callback_button2 = types.InlineKeyboardButton(text = '–ù–µ —á–∏—Ç–∞—Ç—å ‚ùå',callback_data = 'dont ' + str(idk))
				keyboard.add(callback_button2)
				bot.send_photo(call.message.chat.id, photo = 'AgACAgIAAx0CZQN7rQACznBjQgABiPsE5FE7am8mfAOKiXsSOEsAAju9MRuS1hFKlyErHhjWQfcBAAMCAANzAAMqBA',caption = '–í–æ–∑–≤—Ä–∞—â–∞—è—Å—å —Å —Ä–∞–±–æ—Ç—ã, —Ç—ã –∑–∞–º–µ—Ç–∏–ª —Å–≤–µ–∂—É—é –≥–∞–∑–µ—Ç—É, —Ç–æ—Ä—á–∞—â—É—é –∏–∑ —Ç–≤–æ–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞. –ü—Ä–æ—á–∏—Ç–∞—Ç—å –µ—ë?',reply_markup=keyboard)
		else:
			args = images[stage]
			args = args.split()
			phot = str(args[0])
			propusk = eval(args[1])
			reason = int(args[2])
			keyboard = types.InlineKeyboardMarkup(row_width=2)
			callback_button1 = types.InlineKeyboardButton(text = '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚úÖ',callback_data = f'paper {idk} True {propusk} {reason} 0')
			callback_button2 = types.InlineKeyboardButton(text = '–î–∞—Ç—å –ø–∏–∑–¥—ã ‚ùå',callback_data = f'paper {idk} False {propusk} {reason} 0')
			callback_button3 = types.InlineKeyboardButton(text = '–£—Å–ª–æ–≤–∏—è ‚ùî',callback_data = 'spravka ' + str(idk))
			keyboard.add(callback_button1,callback_button2)
			keyboard.add(callback_button3)
			struct['stage'] = stage
			struct['mistakes'] = mistakes
			time.sleep(1)
			bot.edit_message_media(media=telebot.types.InputMedia(media=phot,type="photo", parse_mode='HTML'),chat_id=call.message.chat.id, message_id=call.message.message_id,reply_markup=keyboard)
			db[key] = pack(struct)
	elif cmd == "spravka":
		txt = today_text
		answer_callback_query(bot,call,txt,True)
	elif cmd == "wikicmd":
		state = int(args[2])
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		keyboard = types.InlineKeyboardMarkup(row_width=2)
		if state == 0:
			callback_button1 = types.InlineKeyboardButton(text = '‚¨ÖÔ∏è',callback_data = f'wikicmd {call.from_user.id} 2')
			callback_button2 = types.InlineKeyboardButton(text = '‚û°Ô∏è',callback_data = f'wikicmd {call.from_user.id} 1')
			text = help_text[0]
		elif state == 1:
			callback_button1 = types.InlineKeyboardButton(text = '‚¨ÖÔ∏è',callback_data = f'wikicmd {call.from_user.id} 0')
			callback_button2 = types.InlineKeyboardButton(text = '‚û°Ô∏è',callback_data = f'wikicmd {call.from_user.id} 2')
			text = help_text[1]
		elif state == 2:
			callback_button1 = types.InlineKeyboardButton(text = '‚¨ÖÔ∏è',callback_data = f'wikicmd {call.from_user.id} 1')
			callback_button2 = types.InlineKeyboardButton(text = '‚û°Ô∏è',callback_data = f'wikicmd {call.from_user.id} 0')
			text = help_text[2]
		keyboard.add(callback_button1,callback_button2)
		time.sleep(1)
		bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=text, reply_markup=keyboard)
	elif cmd == "wikicraft":
		state = int(args[2])
		gender = int(args[3])
		answer_callback_query(bot,call,'–£—Å–ø–µ—à–Ω–æ')
		keyboard = types.InlineKeyboardMarkup(row_width=2)
		if state == 1:
			callback_button1 = types.InlineKeyboardButton(text = '‚¨ÖÔ∏è –ü–æ—á–∏–Ω–∫–∞',callback_data = f'wikicraft {idk} 2 {gender}')
			callback_button2 = types.InlineKeyboardButton(text = '–°–æ–∑–¥–∞–Ω–∏–µ ‚û°Ô∏è',callback_data = f'wikicraft {idk} 3 {gender}')
			text = '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–∞–π–ø–æ–≤–æ–≥–æ –±—Ä–µ–Ω–¥–æ–≤–æ–≥–æ —à–º–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –ø–æ–ª—É—á–∞–µ–º—ã–µ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –î–∞–≤–∞–π—Ç–µ –Ω–µ –±—É–¥–µ–º –¥—É–º–∞—Ç—å –æ —Ç–æ–º, –∫—É–¥–∞ –¥–µ–≤–∞—é—Ç—Å—è –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∏ –∏–∑ –∫–æ—Ä–æ–±–æ–∫ –ø—Ä–∏ —ç—Ç–æ–º'
			text += '\n\nüéÅ –ö–æ—Ä–æ–±–∫–∞ —Å –Ω–µ–∫–æ\n–†–µ–∑—É–ª—å—Ç–∞—Ç:  üì¶ –ö–∞—Ä—Ç–æ–Ω √ó 2\n\nüéÅ –ö–æ—Ä–æ–±–∫–∞ —Å —Ö–æ—Ä–Ω–∏ –Ω–µ–∫–æ\n–†–µ–∑—É–ª—å—Ç–∞—Ç:  üì¶ –ö–∞—Ä—Ç–æ–Ω √ó 3\n\nüéÅ –ö–æ—Ä–æ–±–∫–∞ —Å —É–∫—Ä–∞—à–µ–Ω–∏—è–º–∏\n–†–µ–∑—É–ª—å—Ç–∞—Ç:  üì¶ –ö–∞—Ä—Ç–æ–Ω √ó 3\n\n<code>–†–∞–∑–æ–±—Ä–∞—Ç—å [–Ω–∞–∑–≤] [–∫–æ–ª–≤–æ]</code><i> - —Ä–∞–∑–æ–±—Ä–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç</i>'
		elif state == 2:
			callback_button1 = types.InlineKeyboardButton(text = '‚¨ÖÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ',callback_data = f'wikicraft {idk} 3 {gender}')
			callback_button2 = types.InlineKeyboardButton(text = '–†–∞–∑–±–æ—Ä–∫–∞ ‚û°Ô∏è',callback_data = f'wikicraft {idk} 1 {gender}')
			text = '–°–æ–∑–¥–∞–Ω–Ω—É—é –∏–∑ –≥–æ–≤–Ω–∞ –∏ –ø–∞–ª–æ–∫ –≤–µ—â—å –º–æ–∂–Ω–æ –Ω–∞–¥–µ—Ç—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å. –î–∞–∂–µ —Å–∞–º—ã–π –æ—Ö—É–µ–Ω–Ω—ã–π –∏ –ø–∏–∑–¥–∞—Ç—ã–π —à–º–æ—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º –ª–æ–º–∞–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –Ω—É–∂–Ω–æ —á–∏–Ω–∏—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–ª–Ω–æ–π –ø–æ—á–∏–Ω–∫–∏ –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –∏ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 1 –∫–∞—Ä—Ç–æ–Ω üì¶'
			text += '\n\n<code>–ü–æ—á–∏–Ω–∏—Ç—å</code><i> - –ø–æ—á–∏–Ω–∏—Ç—å –Ω–∞–¥–µ—Ç—É—é –≤–µ—â—å</i>'
		else:
			callback_button1 = types.InlineKeyboardButton(text = '‚¨ÖÔ∏è –†–∞–∑–±–æ—Ä–∫–∞',callback_data = f'wikicraft {idk} 1 {gender}')
			callback_button2 = types.InlineKeyboardButton(text = '–ü–æ—á–∏–Ω–∫–∞ ‚û°Ô∏è',callback_data = f'wikicraft {idk} 2 {gender}')
			text = '–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —Å–≤–æ–µ–π –±–∞–∑–µ, —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –¥–ª—è —Å–≤–æ–µ–π –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤—ã—Å–∏—Ç –µ—ë –∂–∏–≤—É—á–µ—Å—Ç—å –≤ –±–æ—é'
			if gender == 1:
				text = '–ò—Å–ø–æ–ª—å–∑—É—è —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —Å–≤–æ–µ–π –±–∞–∑–µ, —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∏–ª—å–Ω—É—é –æ–¥–µ–∂–¥—É –¥–ª—è —Å–≤–æ–µ–≥–æ –Ω–µ–∫–æ–º–∞–ª—å—á–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–≤—ã—Å–∏—Ç –µ–≥–æ –∂–∏–≤—É—á–µ—Å—Ç—å –≤ –±–æ—é'
			text += '\n\nüëñ –®—Ç–∞–Ω—ã –∑–∞ 40 –≥—Ä–∏–≤–µ–Ω—å\n–†–µ—Ü–µ–ø—Ç:  üí∞ –ù–µ–∫–æ–≥—Ä–∏–≤–Ω—ã √ó 40\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:  +1 –º–∞–∫—Å —Ö–ø üíó\n\nüëó –ö–æ—Å—Ç—é–º –≥–æ—Ä–Ω–∏—á–Ω–æ–π\n–†–µ—Ü–µ–ø—Ç:  üì¶ –ö–∞—Ä—Ç–æ–Ω √ó 5\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:  +2 –º–∞–∫—Å —Ö–ø üíó\n\nü¶∫ –ö—É—Ä—Ç–∫–∞ —Å–∞–Ω—Å–∞\n–†–µ—Ü–µ–ø—Ç:  üì¶ –ö–∞—Ä—Ç–æ–Ω √ó 10 | ü¶¥ –ö–æ—Å—Ç—å —Å–∞–Ω—Å–∞ √ó 5\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:  +4 –º–∞–∫—Å —Ö–ø üíó\n\n<code>–°–æ–∑–¥–∞—Ç—å [–Ω–∞–∑–≤]</code><i> - —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç</i>'
		keyboard.add(callback_button1,callback_button2)
		time.sleep(1)
		phot = call.message.photo[-1].file_id
		bot.edit_message_caption(caption = text, chat_id=call.message.chat.id, message_id=call.message.message_id, reply_markup=keyboard)
	elif cmd == "comb":
		txt = '–í —Å–ª—É—á–∞–µ –≤—ã–∏–≥—Ä—ã—à–∞ 10 –Ω–µ–∫–æ–≥—Ä–∏–≤–µ–Ω –∑–∞ –ø—É—Å–∫ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏:\nüçãüçã - 0 üí∞\nüçâüçâ - 0 üí∞\nüçìüçì - 10 üí∞\nüçíüçí - 10 üí∞\nüçìüçìüçì - 50 üí∞\nüçíüçíüçí - 70 üí∞\nüçâüçâüçâ - 120 üí∞\nüçãüçãüçã - —Ö–æ—Ä–Ω–∏ –Ω–µ–∫–æ–¥–µ–≤–æ—á–∫–∞ üê±'
		answer_callback_query(bot,call,txt,True)
